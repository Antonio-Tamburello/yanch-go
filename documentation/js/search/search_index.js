var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AlertPopupComponent.html",[0,0.616,1,1.272]],["body/components/AlertPopupComponent.html",[0,1.086,1,1.97,2,1.459,3,0.11,4,0.128,5,1.184,6,1.184,7,1.184,8,0.128,9,5.648,10,5.03,11,2.625,12,0.205,13,3.058,14,2.434,15,4.263,16,1.184,17,2.76,18,2.76,19,1.706,20,1.71,21,1.706,22,4.411,23,1.706,24,4.411,25,0.11,26,0.266,27,3.689,28,3.342,29,2.111,30,3.054,31,4.396,32,1.618,33,5.657,34,2.43,35,2.848,36,1.572,37,4.411,38,4.411,39,3.782,40,5.518,41,1.809,42,0.02,43,4.411,44,1.897,45,3.062,46,2.811,47,2.919,48,0.963,49,1.321,50,1.626,51,1.545,52,3.368,53,2.363,54,2.606,55,2.811,56,3.782,57,0.295,58,0.625,59,3.062,60,3.368,61,4.411,62,1.263,63,3.782,64,4.433,65,2.811,66,3.062,67,4.411,68,4.411,69,0.824,70,1.066,71,0.748,72,2.625,73,2.338,74,2.625,75,2.338,76,1.184,77,0.146,78,1.809,79,2.625,80,3.062,81,3.062,82,4.411,83,1.184,84,1.706,85,1.706,86,1.184,87,2.188,88,1.184,89,0.516,90,1.184,91,1.066,92,1.184,93,1.013,94,1.184,95,1.184,96,1.013,97,1.184,98,1.013,99,1.184,100,1.013,101,1.184,102,1.066,103,1.184,104,1.066,105,1.184,106,1.013,107,1.184,108,1.066,109,1.184,110,1.013,111,1.184,112,1.066,113,1.184,114,1.013,115,1.184,116,0.787,117,1.184,118,1.184,119,0.011,120,0.011]],["title/interfaces/AlertPopupConfig.html",[27,2.157,121,0.089]],["body/interfaces/AlertPopupConfig.html",[3,0.232,4,0.199,8,0.199,12,0.318,14,2.14,15,3.822,25,0.17,26,0.358,27,3.507,31,3.034,42,0.02,44,2.178,57,0.466,58,0.917,77,0.309,119,0.015,120,0.015,121,0.116,122,0.997,123,3.3,124,3.3,125,0.707,126,5.807,127,4.696,128,2.359,129,5.807,130,4.939,131,2.175,132,4.081,133,4.081,134,2.308,135,4.081,136,3.062,137,4.116,138,3.507,139,3.784,140,4.116,141,4.116,142,4.116]],["title/injectables/AlertPopupService.html",[28,2.157,143,1.148]],["body/injectables/AlertPopupService.html",[3,0.141,4,0.165,8,0.165,12,0.264,14,2.371,15,4.235,20,1.305,25,0.141,26,0.317,27,4.141,28,3.106,30,3.494,31,4.398,32,1.929,36,1.541,40,5.409,42,0.02,44,2.315,47,3.255,48,1.653,49,2.269,50,1.653,51,1.572,57,0.395,62,0.963,63,4.508,64,5.071,65,3.351,69,0.943,71,0.963,72,3.381,73,3.011,77,0.188,79,3.381,89,0.462,119,0.014,120,0.014,127,3.646,143,1.653,144,1.912,145,5.634,146,3.381,147,5.071,148,4.508,149,3.944,150,5.257,151,5.257,152,3.944,153,5.257,154,4.508,155,1.61,156,1.24,157,4.398,158,2.549,159,3.944,160,5.257,161,4.508,162,3.944,163,4.508,164,5.257,165,1.526,166,2.33,167,2.035,168,1.447,169,5.257,170,3.944,171,3.944,172,2.514,173,3.944]],["title/components/AppComponent.html",[0,0.616,91,1.272]],["body/components/AppComponent.html",[0,1.027,1,2.006,2,1.501,3,0.114,4,0.133,5,1.232,6,1.232,7,1.232,8,0.133,10,2.432,12,0.213,13,3.146,14,2.3,15,3.738,16,1.232,17,2.777,18,2.777,19,1.755,20,1.501,21,1.755,23,1.755,25,0.114,26,0.274,27,3.933,28,3.403,36,1.487,42,0.02,44,1.665,50,1.914,51,1.82,52,3.464,53,1.455,54,2.68,56,3.89,57,0.303,58,0.451,62,0.778,69,1.061,71,0.778,73,2.432,75,2.432,76,1.755,77,0.152,83,1.232,84,1.755,85,1.755,86,1.232,87,2.228,88,1.232,89,0.531,90,1.232,91,2.006,92,1.232,93,1.054,94,1.232,95,1.232,96,1.054,97,1.232,98,1.054,99,1.232,100,1.054,101,1.232,102,1.109,103,1.232,104,1.109,105,1.232,106,1.054,107,1.232,108,1.109,109,1.232,110,1.054,111,1.232,112,1.109,113,1.232,114,1.054,115,1.232,116,0.818,117,1.232,118,1.232,119,0.012,120,0.012,127,3.665,138,2.68,147,4.531,148,3.89,157,2.892,165,1.232,167,2.972,174,2.731,175,3.994,176,5.285,177,2.911,178,4.035,179,1.841,180,4.537,181,4.537,182,2.952,183,3.369,184,3.185,185,3.185,186,3.88,187,4.537,188,4.537,189,4.537,190,4.537,191,4.537,192,3.185,193,4.537,194,3.185,195,3.464,196,3.146,197,4.537,198,3.89,199,3.464,200,3.185,201,1.754,202,1.3,203,1.643,204,3.185,205,3.185,206,3.185,207,3.185,208,2.208,209,3.464,210,4.537]],["title/components/BarChartComponent.html",[0,0.616,93,1.208]],["body/components/BarChartComponent.html",[0,1.099,1,1.112,2,1.504,3,0.114,4,0.133,5,1.235,6,1.235,7,1.235,8,0.133,14,1.057,16,1.235,17,2.778,18,2.778,19,1.759,20,1.751,21,1.759,23,1.759,25,0.114,26,0.274,34,2.504,36,1.547,41,3.407,42,0.02,50,1.429,51,2.209,62,0.78,69,0.725,70,2.32,71,0.78,76,1.759,77,0.153,78,1.887,83,1.235,84,1.759,85,1.759,86,1.235,87,2.231,88,1.235,89,0.532,90,1.235,91,1.112,92,1.235,93,1.908,94,2.807,95,1.235,96,1.057,97,1.235,98,1.057,99,1.235,100,1.057,101,1.235,102,1.112,103,1.235,104,1.112,105,1.235,106,1.057,107,1.235,108,1.112,109,1.235,110,1.057,111,1.235,112,1.112,113,1.235,114,1.057,115,1.235,116,0.821,117,1.235,118,1.235,119,0.012,120,0.012,125,0.349,128,2.394,172,2.898,177,2.916,183,4.32,196,3.67,201,1.759,211,4.976,212,4.976,213,2.738,214,7.024,215,4.546,216,4.546,217,6.517,218,4.546,219,4.538,220,5.293,221,5.293,222,5.293,223,4.546,224,4.546,225,2.738,226,4.945,227,5.767,228,5.767,229,3.999]],["title/components/ButtonComponent.html",[0,0.616,96,1.208]],["body/components/ButtonComponent.html",[0,1.098,1,1.335,2,1.706,3,0.137,4,0.16,5,1.482,6,1.482,7,1.482,8,0.16,12,0.256,14,1.268,16,1.482,17,2.849,18,2.849,19,1.995,20,1.929,21,1.995,23,1.995,25,0.137,26,0.311,34,2.841,36,1.523,41,2.264,42,0.02,44,2.139,50,1.622,51,1.542,60,3.938,62,0.936,69,0.929,70,1.335,71,0.936,76,1.995,77,0.183,78,2.264,83,1.482,84,1.995,85,1.995,86,1.482,87,2.412,88,1.482,89,0.604,90,1.482,91,1.335,92,1.482,93,1.268,94,1.482,95,1.482,96,2.063,97,1.482,98,1.268,99,1.482,100,1.268,101,1.482,102,1.335,103,1.482,104,1.335,105,1.482,106,1.268,107,1.482,108,1.335,109,1.482,110,1.268,111,1.482,112,1.335,113,1.482,114,1.268,115,1.482,116,0.985,117,1.482,118,1.482,119,0.013,120,0.013,125,0.564,172,3.287,179,2.03,195,4.451,196,4.042,203,1.977,225,3.286,230,3.286,231,3.928,232,5.157,233,5.157,234,2.335,235,5.58,236,5.157,237,5.157,238,5.829,239,3.286,240,5.157]],["title/interfaces/ButtonConfig.html",[121,0.089,234,1.272]],["body/interfaces/ButtonConfig.html",[3,0.215,4,0.169,8,0.169,12,0.271,25,0.145,26,0.323,29,2.604,42,0.02,44,1.965,51,1.907,57,0.485,58,1.051,77,0.194,119,0.014,120,0.014,121,0.098,122,0.849,125,0.655,128,2.221,130,4.579,136,2.763,137,3.714,138,3.164,139,3.414,140,3.714,141,3.714,142,3.714,156,2.217,179,2.221,231,3.514,234,1.865,235,5.469,241,3.096,242,3.768,243,3.291,244,3.768,245,5.469,246,5.469,247,4.127,248,3.096,249,4.89,250,2.812,251,2.812]],["title/components/CardComponent.html",[0,0.616,98,1.208]],["body/components/CardComponent.html",[0,1.127,1,1.445,2,1.799,3,0.149,4,0.173,5,1.605,6,1.605,7,1.605,8,0.173,12,0.277,14,1.373,16,1.605,17,2.877,18,2.877,19,2.104,20,1.799,21,2.104,23,2.104,25,0.149,26,0.328,34,2.995,36,1.328,42,0.02,62,1.014,69,0.867,70,2.327,71,1.014,76,1.605,77,0.198,83,1.605,84,2.104,85,2.104,86,1.605,87,2.49,88,1.605,89,0.636,90,1.605,91,1.445,92,1.605,93,1.373,94,1.605,95,1.605,96,1.373,97,1.605,98,2.129,99,1.605,100,1.373,101,1.605,102,1.445,103,1.605,104,1.445,105,1.605,106,1.373,107,1.605,108,1.445,109,1.605,110,1.373,111,1.605,112,1.445,113,1.605,114,1.373,115,1.605,116,1.066,117,1.605,118,1.605,119,0.014,120,0.014,125,0.594,252,3.558,253,4.453,254,5.438,255,5.438,256,5.729,257,5.438,258,6.065,259,1.813,260,2.452,261,3.558]],["title/interfaces/CardConfig.html",[121,0.089,260,2.157]],["body/interfaces/CardConfig.html",[3,0.227,4,0.191,8,0.191,12,0.306,25,0.164,26,0.35,42,0.02,44,2.126,57,0.446,58,0.997,77,0.219,119,0.015,120,0.015,121,0.111,122,0.959,125,0.633,136,2.989,137,4.017,138,3.423,139,3.693,140,4.017,141,4.017,142,4.017,156,2.213,253,3.693,260,3.423,262,3.497,263,5.794,264,5.727,265,3.239,266,6.201,267,2.953,268,6.201,269,6.201]],["title/interfaces/Cities.html",[121,0.089,270,1.208]],["body/interfaces/Cities.html",[3,0.154,4,0.18,8,0.18,12,0.288,25,0.154,26,0.336,42,0.02,57,0.373,58,1.012,77,0.337,89,0.723,116,1.108,119,0.014,120,0.014,121,0.171,122,0.903,125,0.771,134,2.092,259,1.289,270,2.389,271,2.225,272,3.072,273,3.37,274,2.238,275,3.576,276,2.407,277,2.877,278,1.356,279,2.092,280,1.761,281,2.225,282,2.225,283,1.356,284,1.761,285,1.583,286,2.225,287,2.824,288,2.225,289,2.548,290,2.225,291,2.985,292,2.225,293,2.225,294,2.877,295,2.877,296,2.092,297,2.225,298,2.225,299,1.502,300,2.225,301,2.092]],["title/components/CitiesComponent.html",[0,0.616,100,1.208]],["body/components/CitiesComponent.html",[0,1.014,1,0.721,2,1.67,3,0.074,4,0.086,5,0.801,6,0.801,7,0.801,8,0.086,12,0.219,13,2.274,14,0.685,16,0.801,17,2.569,18,2.569,19,1.269,20,1.085,21,1.269,23,1.269,25,0.074,26,0.198,29,1.891,30,2.406,32,1.203,36,1.584,42,0.02,44,1.203,48,1.28,49,1.757,50,1.935,51,1.84,53,1.861,55,2.09,57,0.359,58,0.577,62,0.506,69,1.033,70,1.142,71,0.506,76,1.269,77,0.099,83,0.801,84,1.269,85,1.269,86,0.801,87,1.792,88,0.801,89,0.735,90,0.801,91,0.721,92,0.801,93,0.685,94,0.801,95,0.801,96,1.347,97,0.801,98,1.347,99,0.801,100,1.532,101,0.801,102,0.721,103,0.801,104,0.721,105,0.801,106,1.347,107,0.801,108,0.721,109,0.801,110,0.685,111,0.801,112,0.721,113,0.801,114,0.685,115,0.801,116,0.532,117,0.801,118,0.801,119,0.009,120,0.009,128,1.613,131,1.498,136,1.692,155,0.845,156,0.651,157,3.218,158,1.59,165,0.801,168,0.76,177,1.806,179,1.142,183,4.003,186,3.218,201,1.14,202,0.845,203,1.068,208,3.901,231,2.958,234,1.418,242,1.937,243,1.692,244,1.937,247,1.806,249,2.274,265,1.59,267,1.339,270,2.363,274,2.145,279,1.59,299,1.613,302,1.581,303,3.212,304,2.09,305,3.491,306,3.109,307,2.243,308,3.279,309,3.279,310,3.109,311,4.072,312,5.626,313,4.072,314,3.72,315,3.109,316,2.193,317,2.406,318,3.011,319,3.279,320,3.537,321,3.971,322,3.279,323,2.07,324,3.279,325,3.971,326,2.504,327,2.318,328,3.279,329,2.07,330,4.1,331,3.537,332,3.537,333,2.504,334,2.07,335,3.279,336,5.37,337,3.212,338,2.952,339,2.07,340,2.07,341,5.37,342,4.072,343,2.812,344,2.812,345,3.279,346,3.279,347,2.07,348,3.279,349,5.152,350,3.279,351,2.07,352,3.971,353,2.274,354,3.279,355,3.279,356,2.07,357,3.279,358,2.07,359,2.812,360,2.07,361,2.274,362,2.07,363,3.279,364,1.59,365,2.812,366,3.279,367,3.279,368,1.59,369,1.59,370,2.504,371,2.504,372,2.09,373,2.07,374,1.339,375,1.498,376,2.07,377,2.812,378,2.812,379,1.581,380,1.775,381,1.775,382,1.775,383,1.581,384,1.581,385,1.581,386,1.775,387,1.435,388,2.07,389,1.581,390,2.07,391,2.09,392,2.09,393,3.279,394,3.279]],["title/interfaces/City.html",[121,0.089,274,1.208]],["body/interfaces/City.html",[3,0.153,4,0.178,8,0.178,12,0.285,25,0.153,26,0.334,42,0.02,57,0.411,58,1.053,77,0.336,89,0.808,116,1.096,119,0.014,120,0.014,121,0.171,122,0.893,125,0.769,134,2.068,259,1.275,270,2.152,271,2.201,272,2.35,273,2.201,274,2.23,275,3.524,276,2.909,277,3.478,278,1.341,279,2.068,280,1.742,281,2.201,282,2.201,283,1.341,284,1.742,285,1.565,286,2.201,287,2.809,288,2.201,289,2.53,290,2.201,291,2.972,292,2.201,293,2.201,294,2.856,295,2.856,296,2.068,297,2.201,298,2.201,299,1.486,300,2.201,301,2.068]],["title/components/CityComponent.html",[0,0.616,102,1.272]],["body/components/CityComponent.html",[0,1.105,1,0.677,2,1.619,3,0.175,4,0.081,5,0.752,6,0.752,7,0.752,8,0.081,12,0.13,13,2.163,14,0.643,16,0.752,17,2.534,18,2.534,19,1.207,20,1.032,21,1.207,23,1.207,25,0.07,26,0.188,30,2.308,32,1.144,36,1.507,39,2.674,42,0.02,44,1.64,46,1.988,47,1.609,48,0.611,49,1.686,50,1.899,51,1.878,53,1.785,57,0.299,58,0.442,62,0.954,65,1.988,69,1.018,71,0.475,76,1.207,77,0.093,83,0.752,84,1.207,85,1.729,86,0.752,87,1.729,88,0.752,89,0.365,90,0.752,91,0.677,92,0.752,93,1.292,94,0.752,95,0.752,96,1.292,97,0.752,98,1.292,99,0.752,100,0.643,101,0.752,102,1.819,103,0.752,104,0.677,105,0.752,106,0.643,107,0.752,108,0.677,109,0.752,110,0.643,111,0.752,112,0.677,113,0.752,114,1.292,115,0.752,116,0.5,117,0.752,118,0.752,119,0.008,120,0.008,125,0.489,128,1.086,131,1.425,136,1.609,157,3.119,158,1.512,165,0.752,177,1.718,179,1.086,183,3.498,186,3.752,199,2.382,201,1.071,203,1.003,208,1.348,211,1.484,212,1.484,231,2.462,234,1.36,242,1.843,243,2.695,244,1.843,247,1.718,249,2.163,253,1.988,259,1.336,260,3.086,265,1.512,270,1.032,274,2.374,276,1.686,284,2.33,285,1.795,289,2.043,292,1.609,293,1.609,296,1.512,299,1.086,301,1.512,304,1.988,306,2.982,307,2.152,310,2.982,314,3.849,315,2.982,317,2.308,318,2.943,320,3.413,330,2.382,331,2.382,332,2.382,333,3.413,338,1.988,344,3.833,352,3.833,353,2.163,359,2.674,361,2.163,377,2.674,380,1.667,381,1.667,382,1.667,384,1.484,386,1.667,389,1.484,392,1.988,395,1.484,396,2.163,397,3.119,398,3.119,399,2.891,400,2.943,401,3.906,402,1.944,403,3.119,404,2.674,405,4.47,406,1.944,407,3.119,408,1.944,409,1.944,410,1.944,411,1.944,412,1.944,413,2.674,414,2.382,415,3.119,416,3.833,417,3.119,418,2.462,419,3.119,420,3.119,421,3.119,422,3.119,423,1.944,424,3.099,425,2.674,426,1.718,427,1.944,428,2.382,429,3.119,430,1.944,431,3.119,432,3.119,433,2.674,434,3.119,435,3.119,436,2.641,437,3.119,438,5.488,439,4.47,440,3.119,441,3.119,442,3.119,443,3.119,444,3.119,445,1.944,446,4.47,447,2.674,448,3.119,449,3.119,450,2.674,451,3.119,452,1.944,453,1.944,454,1.944,455,1.484,456,1.484,457,1.944,458,1.944,459,1.484,460,1.944,461,1.944,462,3.119,463,3.119,464,3.119,465,3.119,466,3.119,467,3.119,468,3.119,469,3.119,470,4.47,471,3.119,472,3.119,473,3.119,474,3.119,475,3.119]],["title/interfaces/CityInfoResponse.html",[121,0.089,285,1.34]],["body/interfaces/CityInfoResponse.html",[3,0.143,4,0.166,8,0.166,12,0.266,25,0.143,26,0.319,42,0.02,57,0.469,58,1.044,77,0.331,89,0.793,116,1.024,119,0.014,120,0.014,121,0.168,122,0.834,125,0.756,134,1.932,259,1.582,270,2.096,271,2.056,272,2.195,273,2.056,274,2.096,275,3.573,276,2.846,277,3.402,278,1.253,279,1.932,280,1.627,281,2.056,282,2.056,283,1.665,284,2.162,285,1.942,286,3.268,287,3.21,288,3.268,289,2.895,290,3.268,291,3.249,292,2.056,293,2.056,294,2.731,295,2.731,296,1.932,297,2.056,298,2.056,299,1.388,300,2.056,301,1.932]],["title/interfaces/Climate.html",[121,0.089,291,1.668]],["body/interfaces/Climate.html",[3,0.154,4,0.18,8,0.18,12,0.288,25,0.154,26,0.336,42,0.02,57,0.373,58,1.012,77,0.337,89,0.723,116,1.108,119,0.014,120,0.014,121,0.171,122,0.903,125,0.771,134,2.092,259,1.289,270,2.161,271,2.225,272,2.376,273,2.225,274,2.044,275,3.61,276,2.407,277,2.877,278,1.356,279,2.092,280,1.761,281,2.225,282,2.225,283,1.356,284,1.761,285,1.583,286,2.225,287,2.824,288,2.225,289,2.548,290,2.225,291,3.166,292,2.225,293,2.225,294,2.877,295,2.877,296,2.092,297,2.225,298,2.225,299,1.942,300,3.37,301,3.167]],["title/interfaces/CoworkingSpace.html",[121,0.089,289,1.668]],["body/interfaces/CoworkingSpace.html",[3,0.152,4,0.178,8,0.178,12,0.285,25,0.152,26,0.334,42,0.02,57,0.41,58,1.043,77,0.336,89,0.808,116,1.67,119,0.014,120,0.014,121,0.171,122,0.891,125,0.768,134,2.065,259,1.273,270,2.15,271,2.197,272,2.345,273,2.197,274,2.032,275,3.57,276,2.386,277,2.853,278,1.339,279,2.065,280,1.738,281,2.197,282,2.197,283,1.339,284,1.738,285,1.562,286,2.197,287,2.806,288,2.197,289,2.806,290,2.197,291,2.97,292,2.197,293,2.197,294,2.853,295,2.853,296,2.681,297,2.853,298,3.354,299,1.483,300,2.197,301,2.065]],["title/components/DashboardComponent.html",[0,0.616,104,1.272]],["body/components/DashboardComponent.html",[0,1.056,1,0.713,2,1.768,3,0.073,4,0.085,5,0.792,6,0.792,7,0.792,8,0.085,12,0.217,14,0.678,16,0.792,17,2.563,18,2.563,19,1.258,20,1.076,21,1.258,23,1.258,25,0.073,26,0.278,29,2.374,30,2.389,32,1.193,36,1.53,42,0.02,44,2.133,47,2.891,48,1.022,49,1.403,50,1.929,51,1.79,53,1.848,57,0.336,62,0.988,69,0.978,71,0.5,76,1.258,77,0.098,83,0.792,84,1.258,85,1.258,86,0.792,87,1.781,88,0.792,89,0.718,90,0.792,91,0.713,92,0.792,93,0.678,94,0.792,95,0.792,96,0.678,97,0.792,98,0.678,99,0.792,100,1.338,101,0.792,102,0.713,103,0.792,104,1.862,105,0.792,106,0.678,107,0.792,108,0.713,109,0.792,110,1.338,111,0.792,112,0.713,113,0.792,114,0.678,115,0.792,116,0.526,117,0.792,118,0.792,119,0.008,120,0.008,125,0.635,128,2.025,131,0.936,155,0.836,156,0.644,157,3.571,158,1.577,161,2.788,165,0.792,168,0.751,177,2.227,183,3.991,186,3.201,201,1.128,231,3.749,234,2.025,242,3.434,243,2.758,244,3.434,247,2.945,248,4.081,259,1.376,267,2.601,304,2.072,306,3.087,315,3.087,320,3.515,330,2.483,331,2.483,332,2.483,333,2.483,349,5.134,361,2.804,384,1.564,389,1.564,404,3.948,413,2.788,436,1.921,476,1.564,477,3.31,478,3.251,479,3.251,480,4.043,481,4.043,482,3.407,483,2.249,484,2.648,485,3.31,486,2.788,487,2.048,488,4.604,489,3.251,490,4.604,491,3.251,492,3.251,493,3.251,494,3.251,495,3.251,496,3.251,497,2.048,498,2.255,499,3.251,500,2.967,501,2.483,502,2.577,503,5.345,504,5.345,505,5.345,506,2.048,507,4.604,508,2.048,509,3.087,510,3.515,511,3.251,512,2.788,513,2.048,514,3.251,515,3.251,516,3.251,517,3.251,518,2.048,519,3.515,520,2.788,521,3.251,522,2.788,523,3.251,524,2.788,525,3.251,526,2.048,527,3.251,528,2.048,529,3.251,530,2.967,531,3.251,532,2.048,533,3.251,534,2.72,535,2.048,536,2.483,537,2.048,538,1.305,539,2.048,540,2.048,541,2.048,542,1.564,543,2.048,544,2.048,545,2.048,546,2.048,547,1.564,548,2.048,549,2.048,550,2.048,551,3.251,552,2.048,553,3.251]],["title/injectables/DashboardEffects.html",[143,1.148,554,2.532]],["body/injectables/DashboardEffects.html",[3,0.12,4,0.14,8,0.14,12,0.224,25,0.12,26,0.284,36,1.44,42,0.02,50,1.854,51,1.762,53,1.534,54,2.782,62,1.329,69,1.026,71,0.82,77,0.16,119,0.012,120,0.012,143,1.854,144,1.628,165,1.299,270,2.232,274,1.951,276,2.545,278,1.481,280,2.535,284,1.923,285,1.996,317,3.803,325,5.055,326,4.502,353,3.265,387,2.328,396,3.265,399,3.803,416,5.055,418,3.248,424,4.088,426,2.594,428,3.595,459,2.563,477,3.483,554,3.265,555,2.878,556,4.709,557,3.265,558,4.476,559,4.088,560,1.517,561,4.037,562,3.357,563,4.037,564,4.153,565,4.709,566,3.357,567,4.464,568,3.265,569,5.324,570,5.055,571,4.709,572,5.324,573,5.896,574,3.595,575,4.709,576,4.305,577,3.357,578,5.055,579,4.502,580,4.709,581,4.709,582,4.709,583,4.305,584,3.357,585,2.878,586,2.563,587,3.357,588,2.563]],["title/injectables/DashboardFacade.html",[143,1.148,314,2.327]],["body/injectables/DashboardFacade.html",[3,0.123,4,0.144,8,0.144,12,0.369,25,0.123,26,0.289,32,1.76,35,1.899,36,1.586,42,0.02,48,1.735,49,2.802,50,1.508,51,1.434,55,3.058,57,0.419,58,0.782,62,0.842,69,1.035,71,0.842,77,0.165,89,0.646,119,0.012,120,0.012,143,1.508,144,1.672,155,2.253,156,1.971,165,1.334,166,2.037,167,1.779,168,1.76,243,2.475,251,3.326,270,2.389,274,2.247,276,2.381,278,1.508,280,2.719,299,2.433,314,3.058,317,4.29,353,3.326,361,3.326,387,2.39,399,3.934,426,3.8,477,2.834,534,2.834,558,4.138,563,5.114,564,3.663,574,3.663,579,4.957,588,2.632,589,2.956,590,4.797,591,4.348,592,2.956,593,4.138,594,4.797,595,4.797,596,3.447,597,6.491,598,3.447,599,4.797,600,3.447,601,5.114,602,3.447,603,4.797,604,3.447,605,4.797,606,2.197,607,3.447,608,2.037,609,3.447,610,3.447,611,3.447]],["title/injectables/DashboardService.html",[143,1.148,559,2.532]],["body/injectables/DashboardService.html",[3,0.11,4,0.129,8,0.129,12,0.206,25,0.11,32,1.626,35,1.698,36,1.268,42,0.02,48,1.784,50,1.394,57,0.431,58,0.735,62,0.753,65,3.308,69,0.905,71,0.753,77,0.147,89,0.841,116,1.334,119,0.012,120,0.012,143,1.394,144,1.495,155,2.119,156,1.632,158,2.149,165,1.192,166,1.821,167,1.59,168,1.904,209,3.384,226,2.643,229,3.073,243,2.287,270,2.285,273,1.59,274,2.071,275,2.149,276,3.012,277,3.519,280,2.317,281,2.287,282,2.287,283,1.394,284,2.556,285,2.082,286,1.59,287,1.409,288,1.59,290,1.59,291,1.409,294,1.59,295,1.59,296,2.516,297,2.677,298,3.229,299,1.544,300,1.59,301,1.495,303,3.935,372,3.617,391,3.308,399,2.618,418,3.126,424,3.935,426,3.702,559,3.073,574,3.384,601,3.8,608,1.821,612,2.643,613,5.189,614,2.643,615,4.865,616,3.082,617,3.8,618,3.082,619,3.082,620,3.935,621,3.082,622,4.432,623,5.189,624,2.643,625,3.082,626,3.082,627,3.8,628,3.082,629,3.8,630,3.8,631,4.432,632,4.432,633,4.432,634,3.082,635,4.432,636,4.432,637,4.865,638,4.432,639,6.821,640,3.082,641,3.082,642,3.082,643,3.082,644,3.8,645,3.082,646,3.082,647,3.082,648,3.082,649,3.082,650,3.082,651,3.082,652,2.643,653,3.082,654,3.082,655,3.082,656,3.082,657,3.082,658,2.643,659,3.082,660,3.082,661,2.643,662,3.082,663,3.082]],["title/interfaces/DashboardState.html",[121,0.089,664,2.532]],["body/interfaces/DashboardState.html",[3,0.14,4,0.164,8,0.164,12,0.262,25,0.14,26,0.316,42,0.02,46,2.501,47,2.024,48,1.855,57,0.35,69,0.94,77,0.282,119,0.014,120,0.014,121,0.095,122,0.821,125,0.573,131,2.696,168,2.407,259,1.882,270,2.454,274,2.433,285,2.476,303,4.091,327,1.693,387,2.721,477,3.875,534,4.453,557,2.721,576,2.721,583,2.721,588,2.996,591,2.721,593,2.501,606,2.501,664,4.091,665,2.996,666,4.001,667,1.903,668,3.364,669,2.996,670,2.996,671,4.001,672,3.633,673,2.996,674,2.996,675,3.633,676,4.504,677,4.504,678,3.364,679,3.364,680,3.364,681,3.364,682,3.364]],["title/interfaces/FooterLogoModel.html",[121,0.089,683,1.884]],["body/interfaces/FooterLogoModel.html",[3,0.149,4,0.173,8,0.173,12,0.277,25,0.149,26,0.328,29,2.22,42,0.02,57,0.458,58,1.064,69,0.867,70,1.894,77,0.334,119,0.014,120,0.014,121,0.166,122,0.869,125,0.764,128,2.388,179,1.445,182,2.637,202,1.695,234,1.894,265,2.012,267,2.476,316,1.695,327,1.791,364,2.012,368,2.012,369,2.012,374,2.628,375,3.133,560,1.014,667,2.012,683,3.129,684,2.141,685,3.583,686,2.995,687,3.447,688,3.213,689,2.286,690,1.791,691,2.995,692,1.523,693,2.637,694,2.141,695,2.806,696,2.452,697,2.141,698,2.806,699,2.141,700,2.995,701,1.445,702,1.373,703,2.141]],["title/interfaces/FooterTextModel.html",[121,0.089,698,1.884]],["body/interfaces/FooterTextModel.html",[3,0.147,4,0.171,8,0.171,12,0.274,25,0.147,26,0.325,29,2.202,42,0.02,57,0.465,58,1.068,69,0.86,70,1.878,77,0.333,119,0.014,120,0.014,121,0.166,122,0.858,125,0.761,128,2.099,179,2.231,182,2.615,202,1.673,234,1.878,265,1.987,267,2.844,316,1.673,327,1.769,364,1.987,368,1.987,369,1.987,374,2.615,375,3.122,560,1.001,667,1.987,683,2.783,684,2.114,685,3.561,686,2.258,687,2.783,688,3.186,689,2.258,690,1.769,691,2.971,692,1.504,693,2.615,694,2.114,695,2.783,696,2.421,697,2.114,698,3.11,699,2.114,700,2.971,701,1.427,702,1.356,703,3.305]],["title/components/FormComponent.html",[0,0.616,106,1.208]],["body/components/FormComponent.html",[0,1.026,1,0.749,2,1.806,3,0.077,4,0.09,5,0.831,6,0.831,7,0.831,8,0.09,12,0.279,14,1.118,15,1.27,16,0.831,17,2.589,18,2.589,19,1.307,20,1.565,21,1.307,23,1.307,25,0.077,26,0.204,28,2.794,32,1.239,34,1.861,36,1.618,41,1.27,42,0.02,44,1.239,47,1.743,48,1.312,49,2.041,50,1.616,51,2.121,52,2.579,53,1.544,57,0.279,60,1.641,62,0.525,69,0.969,70,1.176,71,0.525,74,1.843,75,1.641,76,1.307,77,0.103,78,1.27,83,0.831,84,1.307,85,1.307,86,0.831,87,1.83,88,0.831,89,0.554,90,0.831,91,0.749,92,0.831,93,0.711,94,0.831,95,0.831,96,1.381,97,0.831,98,1.381,99,0.831,100,0.711,101,0.831,102,0.749,103,0.831,104,0.749,105,0.831,106,1.565,107,0.831,108,0.749,109,0.831,110,0.711,111,0.831,112,0.749,113,0.831,114,0.711,115,0.831,116,0.552,117,0.831,118,0.831,119,0.009,120,0.009,125,0.624,126,1.843,127,1.49,128,0.749,131,1.544,139,1.37,155,1.379,156,0.676,158,1.638,163,4.055,168,1.239,177,1.861,178,2.579,179,1.176,201,1.184,202,0.878,203,1.109,229,2.342,253,2.153,256,3.578,260,2.465,261,1.843,264,2.896,304,2.153,305,3.578,307,1.184,310,3.611,316,2.228,321,4.055,327,2.625,374,2.93,375,1.907,392,3.015,414,2.579,418,1.184,425,2.896,436,3.224,498,2.342,509,2.579,675,2.342,690,0.928,692,0.789,693,1.638,702,1.118,704,1.641,705,3.186,706,3.378,707,3.378,708,4.173,709,4.729,710,3.925,711,4.173,712,5.141,713,4.729,714,3.378,715,2.896,716,3.378,717,3.378,718,4.167,719,4.173,720,3.378,721,5.141,722,2.149,723,2.149,724,2.579,725,3.378,726,5.457,727,2.149,728,3.378,729,2.149,730,3.378,731,3.378,732,2.149,733,5.141,734,2.149,735,3.378,736,2.149,737,3.378,738,3.378,739,2.149,740,3.279,741,2.149,742,1.843,743,2.149,744,1.641,745,2.149,746,2.149,747,2.149,748,2.149,749,2.149,750,2.149,751,2.149,752,2.149,753,2.149,754,3.378,755,2.149,756,2.149,757,2.149,758,2.149,759,2.149,760,2.149,761,2.149,762,2.149,763,4.173,764,2.149,765,2.149,766,3.378,767,3.378,768,3.378,769,3.378,770,3.378,771,3.378,772,3.378,773,4.729,774,3.378,775,3.378,776,3.378,777,3.378,778,3.378,779,3.378,780,3.378]],["title/interfaces/FormModel.html",[121,0.089,316,1.491]],["body/interfaces/FormModel.html",[3,0.134,4,0.156,8,0.156,12,0.249,25,0.134,26,0.306,29,2.069,42,0.02,57,0.493,58,1.058,69,0.808,70,1.765,77,0.325,119,0.013,120,0.013,121,0.161,122,0.781,125,0.744,128,2.003,156,2.296,179,1.3,182,3.127,202,1.524,234,2.149,265,2.991,267,2.349,316,2.069,327,1.611,364,2.991,368,1.81,369,1.81,374,2.633,375,3.039,560,0.912,667,1.81,683,3.183,684,1.926,685,2.993,686,2.056,687,3.327,688,2.993,689,2.056,690,1.611,691,3.398,692,1.369,693,2.991,694,3.183,695,3.183,696,3.644,697,3.183,698,3.183,699,3.183,700,2.791,701,1.3,702,1.235,703,1.926]],["title/interfaces/FormOutputModel.html",[121,0.089,690,1.576]],["body/interfaces/FormOutputModel.html",[3,0.153,4,0.178,8,0.178,29,2.263,36,1.044,42,0.02,57,0.435,58,1.061,69,0.884,70,1.93,77,0.336,119,0.014,120,0.014,121,0.168,122,0.895,125,0.755,128,2.143,179,1.488,182,2.688,202,1.745,234,1.93,265,2.072,267,2.512,316,1.745,327,1.844,364,2.072,368,2.072,369,2.072,374,2.658,375,3.082,560,1.044,667,2.688,683,2.86,684,2.205,685,3.275,686,2.354,687,2.86,688,3.275,689,2.354,690,2.392,691,3.053,692,1.568,693,2.688,694,2.205,695,2.86,696,2.525,697,2.205,698,2.86,699,2.205,700,3.053,701,1.488,702,1.414,703,2.205,781,4.273,782,4.273]],["title/interfaces/GetCitiesPayload.html",[121,0.089,280,1.491]],["body/interfaces/GetCitiesPayload.html",[3,0.154,4,0.18,8,0.18,12,0.288,25,0.154,26,0.336,42,0.02,57,0.372,58,1.012,77,0.337,89,0.723,116,1.106,119,0.014,120,0.014,121,0.171,122,0.901,125,0.77,134,2.088,259,1.287,270,2.237,271,2.221,272,2.372,273,2.221,274,2.042,275,3.609,276,2.404,277,2.873,278,1.751,279,2.701,280,2.274,281,3.368,282,3.368,283,1.354,284,1.758,285,1.58,286,2.221,287,2.821,288,2.221,289,2.545,290,2.221,291,2.983,292,2.221,293,2.221,294,2.873,295,2.873,296,2.088,297,2.221,298,2.221,299,1.5,300,2.221,301,2.088]],["title/interfaces/InputFormModel.html",[121,0.089,693,1.77]],["body/interfaces/InputFormModel.html",[3,0.144,4,0.168,8,0.168,12,0.27,25,0.144,26,0.322,29,2.703,42,0.02,57,0.471,58,1.061,69,0.851,70,2.083,77,0.332,119,0.014,120,0.014,121,0.165,122,0.845,125,0.758,128,2.369,156,1.678,179,1.405,182,2.588,202,1.647,234,1.859,265,1.956,267,2.442,316,1.647,327,1.741,364,1.956,368,3.086,369,3.086,374,2.703,375,3.108,560,0.985,667,1.956,683,2.753,684,2.081,685,3.153,686,2.222,687,2.753,688,3.76,689,2.222,690,1.741,691,2.94,692,1.48,693,2.9,694,2.081,695,2.753,696,2.383,697,2.081,698,2.753,699,2.081,700,3.506,701,1.405,702,1.335,703,2.081]],["title/interfaces/InternetSpeed.html",[121,0.089,287,1.668]],["body/interfaces/InternetSpeed.html",[3,0.154,4,0.179,8,0.179,12,0.287,25,0.154,26,0.335,42,0.02,57,0.371,58,1.011,77,0.337,89,0.721,116,1.102,119,0.014,120,0.014,121,0.171,122,0.898,125,0.77,134,2.694,259,1.282,270,2.157,271,2.213,272,2.363,273,2.213,274,2.039,275,3.607,276,2.398,277,2.867,278,1.349,279,2.08,280,1.751,281,2.213,282,2.213,283,1.349,284,1.751,285,1.574,286,2.213,287,2.979,288,2.213,289,2.539,290,2.213,291,2.979,292,2.867,293,2.867,294,3.569,295,3.569,296,2.08,297,2.213,298,2.213,299,1.494,300,2.213,301,2.08]],["title/components/LoginComponent.html",[0,0.616,108,1.272]],["body/components/LoginComponent.html",[0,1.036,1,0.919,2,1.308,3,0.094,4,0.11,5,1.02,6,1.02,7,1.02,8,0.11,12,0.264,14,0.873,16,1.02,17,2.693,18,2.693,19,1.529,20,1.308,21,1.529,23,1.529,25,0.094,26,0.238,29,2.418,32,1.45,36,1.378,42,0.02,48,0.829,49,1.138,50,1.656,51,1.77,53,1.806,57,0.377,62,1.158,69,1.029,71,0.644,76,1.529,77,0.126,83,1.02,84,1.529,85,1.529,86,1.02,87,2.037,88,1.02,89,0.555,90,1.02,91,0.919,92,1.02,93,0.873,94,1.02,95,1.02,96,0.873,97,1.02,98,0.873,99,1.02,100,0.873,101,1.02,102,0.919,103,1.02,104,0.919,105,1.02,106,1.742,107,1.02,108,2.062,109,1.02,110,0.873,111,1.02,112,0.919,113,1.02,114,0.873,115,1.02,116,0.678,117,1.02,118,1.02,119,0.01,120,0.01,125,0.647,128,2.29,136,2.039,155,1.077,156,0.829,158,1.916,165,1.02,168,0.968,179,1.377,182,1.916,186,3.595,202,1.077,208,1.829,242,2.335,243,2.039,244,2.335,247,2.177,250,2.741,267,1.614,316,2.418,318,1.361,337,2.741,338,2.519,343,3.389,364,1.916,368,2.553,369,2.553,370,4.02,371,4.02,372,2.519,374,2.418,375,2.406,379,2.014,383,2.014,385,2.014,391,2.519,396,2.741,426,2.177,436,2.335,483,2.498,485,3.111,498,2.741,536,3.018,538,1.681,542,2.014,547,3.018,560,1.542,567,2.741,568,2.741,687,2.717,690,2.555,694,2.039,697,2.039,699,2.039,701,1.964,702,1.866,703,2.039,710,3.018,718,3.018,724,3.018,740,2.741,783,2.261,784,3.952,785,3.952,786,3.111,787,3.389,788,2.637,789,3.389,790,4.515,791,3.389,792,3.389,793,3.952,794,3.952,795,3.389,796,3.389,797,3.389,798,3.952,799,3.389,800,3.389,801,2.637,802,3.018,803,2.637,804,3.952,805,3.952,806,3.952,807,2.637,808,2.637,809,1.829,810,2.261,811,2.261,812,2.637,813,2.261,814,2.261]],["title/injectables/LoginGuard.html",[143,1.148,815,2.788]],["body/injectables/LoginGuard.html",[3,0.164,4,0.191,8,0.191,20,2.103,25,0.164,32,2.126,35,2.523,36,1.415,42,0.02,48,1.822,57,0.306,62,1.119,69,1.013,71,1.119,77,0.219,89,0.536,119,0.015,120,0.015,130,4.424,143,1.822,144,2.221,155,1.87,156,1.44,166,2.706,167,2.363,172,4.051,203,2.363,219,4.968,318,3.631,400,3.631,418,3.192,484,2.974,560,1.415,608,2.706,809,3.176,815,4.424,816,3.927,817,6.679,818,3.927,819,4.58,820,4.58,821,5.794,822,4.853,823,6.355,824,5.794,825,4.968,826,4.58,827,4.58,828,4.58,829,4.58,830,5.794,831,4.58,832,3.927]],["title/interfaces/LoginPayload.html",[121,0.089,833,1.77]],["body/interfaces/LoginPayload.html",[3,0.166,4,0.194,8,0.194,12,0.31,25,0.166,26,0.353,42,0.02,57,0.391,58,1.073,77,0.331,89,0.786,119,0.015,120,0.015,121,0.168,122,0.972,125,0.756,259,1.388,278,2.011,283,1.838,400,2.396,483,2.475,484,2.897,560,1.563,701,2.41,702,2.289,833,2.834,834,2.744,835,2.396,836,2.96,837,2.558,838,2.252,839,2.252,840,2.252,841,2.744,842,2.96,843,2.744,844,2.252]],["title/injectables/LoginRegisterService.html",[143,1.148,786,2.157]],["body/injectables/LoginRegisterService.html",[3,0.132,4,0.154,8,0.154,12,0.382,25,0.132,32,1.845,35,2.033,36,1.397,42,0.02,48,1.931,54,2.97,57,0.382,58,0.712,62,0.902,69,1.057,71,0.902,77,0.176,89,0.752,119,0.013,120,0.013,131,2.298,143,1.581,144,1.79,155,2.335,156,1.798,165,1.428,166,2.18,167,1.904,168,1.845,278,1.931,283,1.931,299,1.751,396,3.486,414,4.688,418,3.382,426,3.856,483,2.375,560,1.73,567,3.486,568,3.486,608,2.18,614,3.164,615,5.265,617,4.311,620,4.257,624,3.164,629,4.311,692,1.845,701,2.138,702,2.031,786,2.97,833,3.289,838,2.438,839,3.348,840,3.289,844,2.438,845,3.164,846,3.691,847,5.028,848,3.691,849,6.14,850,6.14,851,5.028,852,3.691,853,3.691,854,2.818,855,3.691,856,2.818,857,3.691,858,4.311,859,3.691,860,5.028,861,3.691,862,5.028,863,3.691,864,3.691]],["title/interfaces/LoginResponse.html",[121,0.089,838,1.77]],["body/interfaces/LoginResponse.html",[3,0.166,4,0.193,8,0.193,12,0.31,25,0.166,26,0.352,42,0.02,57,0.39,58,1.073,77,0.33,89,0.839,119,0.015,120,0.015,121,0.168,122,0.97,125,0.756,259,1.385,278,1.836,283,2.009,400,2.391,483,2.731,484,2.758,560,1.561,701,2.033,702,1.931,833,2.248,834,2.738,835,2.391,836,3.721,837,3.216,838,2.831,839,2.248,840,2.248,841,2.738,842,2.954,843,2.738,844,2.248]],["title/components/NavBarComponent.html",[0,0.616,110,1.208]],["body/components/NavBarComponent.html",[0,1.065,1,1.223,2,2.088,3,0.126,4,0.146,5,1.358,6,1.358,7,1.358,8,0.146,12,0.235,14,1.161,16,1.358,17,2.816,18,2.816,19,1.879,20,1.843,21,1.879,23,1.879,25,0.126,26,0.293,34,2.676,36,1.469,41,2.074,42,0.02,44,2.044,62,0.858,69,0.958,70,1.223,71,0.858,76,1.879,77,0.168,78,2.074,83,1.358,84,1.879,85,1.879,86,1.358,87,2.326,88,1.358,89,0.569,90,1.358,91,1.223,92,1.358,93,1.161,94,2.679,95,1.358,96,1.843,97,1.358,98,1.161,99,1.358,100,1.161,101,1.358,102,1.223,103,1.358,104,1.223,105,1.358,106,1.161,107,1.358,108,1.223,109,1.358,110,1.989,111,1.358,112,1.223,113,1.358,114,1.161,115,1.358,116,0.902,117,1.358,118,1.358,119,0.013,120,0.013,125,0.531,131,1.604,231,3.815,234,1.223,239,3.01,392,3.832,436,3.291,447,5.849,482,4.161,486,5.412,510,3.709,715,4.165,718,4.253,740,3.368,742,3.01,865,2.68,866,4.858,867,4.858,868,4.858,869,4.858,870,5.57,871,3.51,872,4.858,873,6.011,874,4.858,875,6.011]],["title/interfaces/NavbarConfig.html",[121,0.089,482,2.327]],["body/interfaces/NavbarConfig.html",[3,0.187,4,0.218,8,0.218,12,0.348,25,0.187,26,0.379,42,0.02,44,2.303,57,0.45,58,0.954,69,0.831,77,0.249,119,0.016,120,0.016,121,0.127,122,1.091,125,0.686,234,2.559,482,4,510,4.792,520,5.992,522,5.992,524,5.992,689,2.871,876,4.469]],["title/interfaces/RegisterPayload.html",[121,0.089,840,1.77]],["body/interfaces/RegisterPayload.html",[3,0.162,4,0.188,8,0.188,12,0.302,25,0.162,26,0.347,42,0.02,57,0.444,58,1.079,77,0.328,89,0.834,119,0.015,120,0.015,121,0.167,122,0.946,125,0.75,259,1.35,278,1.986,283,1.806,400,2.33,483,2.443,484,2.868,560,1.403,701,2.39,702,2.27,833,2.19,834,2.668,835,2.33,836,2.879,837,2.488,838,2.19,839,2.785,840,2.785,841,3.926,842,2.879,843,2.668,844,2.19]],["title/interfaces/RegisterResponse.html",[121,0.089,844,1.77]],["body/interfaces/RegisterResponse.html",[3,0.166,4,0.193,8,0.193,12,0.309,25,0.166,26,0.352,42,0.02,57,0.39,58,1.073,77,0.33,89,0.838,119,0.015,120,0.015,121,0.168,122,0.968,125,0.755,259,1.743,278,1.833,283,2.008,400,2.387,483,2.729,484,2.893,560,1.424,701,2.031,702,1.929,833,2.243,834,2.733,835,2.387,836,2.948,837,2.548,838,2.243,839,2.243,840,2.243,841,2.733,842,3.716,843,3.445,844,2.827]],["title/components/RegistrationComponent.html",[0,0.616,112,1.272]],["body/components/RegistrationComponent.html",[0,0.946,1,0.907,2,1.295,3,0.093,4,0.109,5,1.007,6,1.007,7,1.007,8,0.109,12,0.262,14,0.862,16,1.007,17,2.687,18,2.687,19,1.515,20,1.295,21,1.515,23,1.515,25,0.093,26,0.236,29,2.754,32,1.437,36,1.278,42,0.02,48,0.819,49,1.124,50,1.479,51,1.406,53,2.15,54,2.313,57,0.35,62,0.636,69,1.003,71,0.636,76,1.515,77,0.124,83,1.007,84,1.515,85,1.515,86,1.007,87,2.024,88,1.007,89,0.69,90,1.007,91,0.907,92,1.007,93,0.862,94,1.007,95,1.007,96,0.862,97,1.007,98,0.862,99,1.007,100,0.862,101,1.007,102,0.907,103,1.007,104,0.907,105,1.007,106,1.731,107,1.007,108,0.907,109,1.007,110,0.862,111,1.007,112,1.822,113,1.007,114,0.862,115,1.007,116,0.669,117,1.007,118,1.007,119,0.01,120,0.01,125,0.572,128,2.437,136,2.02,155,1.063,156,0.819,168,0.956,179,1.364,182,1.899,202,1.063,242,2.313,243,2.02,244,2.313,247,2.157,250,2.715,267,2.406,316,2.406,318,1.344,337,2.715,338,2.496,364,1.899,368,3.179,369,3.179,370,5.005,371,4.499,372,2.496,374,2.406,375,2.391,379,1.989,383,1.989,385,1.989,391,4.009,436,2.313,485,3.091,498,2.715,536,2.99,538,1.66,542,1.989,560,0.957,567,2.715,568,2.715,687,2.7,690,2.543,692,1.437,694,2.02,697,2.02,699,2.02,701,1.954,702,2.129,703,2.02,710,2.99,724,2.99,740,2.715,786,3.091,787,3.357,789,3.357,790,4.486,791,3.357,792,4.486,795,4.486,796,3.357,799,3.357,800,3.357,802,2.99,809,1.806,810,2.233,811,2.233,813,2.233,814,2.233,839,3.05,841,2.78,877,2.233,878,3.915,879,3.915,880,2.604,881,3.915,882,3.915,883,3.915,884,3.915,885,2.604,886,2.604,887,2.604,888,2.604,889,2.604,890,2.604]],["title/components/StarRatingComponent.html",[0,0.616,114,1.208]],["body/components/StarRatingComponent.html",[0,1.179,1,1.357,2,1.726,3,0.139,4,0.163,5,1.508,6,1.508,7,1.508,8,0.163,12,0.26,14,1.289,16,1.508,17,2.855,18,2.855,19,2.018,20,1.945,21,2.018,23,2.018,25,0.139,26,0.315,34,2.873,36,1.274,41,2.302,42,0.02,51,1.757,62,0.952,69,0.621,70,1.357,71,0.952,76,1.508,77,0.186,78,2.302,83,1.508,84,2.018,85,2.018,86,1.508,87,2.429,88,1.508,89,0.61,90,1.508,91,1.357,92,1.508,93,1.289,94,1.508,95,1.508,96,1.289,97,1.508,98,1.289,99,1.508,100,1.289,101,1.508,102,1.357,103,1.508,104,1.357,105,1.508,106,1.289,107,1.508,108,1.357,109,1.508,110,1.289,111,1.508,112,1.357,113,1.508,114,2.077,115,2.867,116,1.904,117,1.508,118,1.508,119,0.014,120,0.014,125,0.57,229,3.617,372,3.325,391,3.325,392,3.325,455,4.489,456,4.489,637,4.472,644,4.472,891,3.341,892,5.216,893,5.216,894,5.216,895,3.897]],["title/interfaces/TitleFormModel.html",[121,0.089,695,1.884]],["body/interfaces/TitleFormModel.html",[3,0.148,4,0.173,8,0.173,12,0.276,25,0.148,26,0.327,29,2.725,42,0.02,57,0.458,58,1.063,69,0.865,70,1.889,77,0.334,119,0.014,120,0.014,121,0.166,122,0.866,125,0.763,128,2.385,156,1.706,179,1.44,182,2.936,202,1.688,234,1.889,265,2.005,267,2.472,316,1.688,327,1.785,364,2.005,368,2.005,369,2.005,374,2.725,375,3.13,560,1.01,667,2.005,683,2.799,684,2.133,685,3.205,686,2.278,687,2.799,688,3.205,689,2.278,690,1.785,691,2.988,692,1.517,693,2.631,694,2.133,695,3.124,696,2.443,697,2.133,698,2.799,699,2.133,700,2.988,701,1.44,702,1.368,703,2.133]],["title/interfaces/UserData.html",[121,0.089,835,1.884]],["body/interfaces/UserData.html",[3,0.164,4,0.191,8,0.191,12,0.307,25,0.164,26,0.35,42,0.02,57,0.425,58,1.076,77,0.329,89,0.837,119,0.015,120,0.015,121,0.167,122,0.961,125,0.753,259,1.372,278,1.824,283,1.824,299,1.598,400,3.449,483,2.724,484,2.885,560,1.417,701,2.02,702,1.919,833,2.225,834,2.711,835,2.993,836,2.925,837,2.528,838,2.225,839,2.225,840,2.225,841,2.711,842,2.925,843,2.711,844,2.225]],["title/injectables/UserEffects.html",[143,1.148,896,2.788]],["body/injectables/UserEffects.html",[3,0.096,4,0.111,8,0.111,12,0.267,25,0.096,26,0.241,30,3.515,32,1.464,35,2.631,36,1.548,42,0.02,48,1.255,49,2.287,50,1.783,51,1.695,53,1.823,54,2.357,57,0.267,58,0.751,62,0.652,69,1.01,71,0.652,77,0.128,89,0.81,119,0.01,120,0.01,131,2.421,143,1.255,144,1.295,154,3.421,155,1.629,156,1.255,165,1.033,168,1.464,203,1.378,278,1.666,283,1.255,299,2.362,317,3.828,318,1.378,400,3.689,418,3.277,459,4.707,477,3.13,483,2.623,484,2.927,500,3.13,501,3.047,502,2.543,558,3.045,560,1.611,561,3.421,564,2.039,569,5.286,570,5.101,572,4.862,578,5.101,585,2.29,586,2.039,608,1.578,630,4.543,692,2.183,786,3.13,802,3.047,809,1.852,818,2.29,825,5.656,832,2.29,835,3.069,838,2.316,844,2.316,896,3.047,897,2.29,898,5.298,899,3.99,900,3.99,901,2.671,902,4.543,903,3.99,904,2.671,905,4.839,906,3.99,907,2.671,908,3.99,909,3.99,910,5.298,911,5.298,912,3.99,913,2.671,914,3.99,915,3.99,916,3.312,917,2.671,918,3.99,919,3.99,920,3.312,921,2.671,922,2.29,923,2.671,924,1.852,925,2.039,926,2.039,927,2.671,928,2.671,929,2.671,930,2.671,931,2.671,932,2.671,933,2.671]],["title/injectables/UserFacade.html",[143,1.148,485,2.157]],["body/injectables/UserFacade.html",[3,0.128,4,0.15,8,0.15,12,0.33,25,0.128,26,0.298,32,1.809,35,1.976,36,1.606,42,0.02,48,1.772,49,2.836,50,1.55,51,1.474,57,0.425,62,0.876,69,1.073,71,0.876,77,0.171,89,0.659,119,0.013,120,0.013,143,1.55,144,1.739,155,2.301,156,1.772,165,1.388,166,2.119,167,1.851,168,1.809,278,2.284,317,4.313,326,4.632,426,3.833,428,4.632,483,2.542,484,2.618,485,2.913,500,3.758,501,3.765,502,3.143,530,3.758,534,2.913,558,4.189,560,1.645,579,5.018,592,3.076,593,4.189,606,2.286,608,2.119,692,2.47,833,2.942,840,2.942,922,3.076,925,2.739,934,3.076,935,4.931,936,4.931,937,3.587,938,3.587,939,4.931,940,3.587,941,4.931,942,4.931,943,3.587,944,3.587,945,3.587,946,3.587,947,3.587,948,3.587]],["title/interfaces/UserState.html",[121,0.089,530,2.157]],["body/interfaces/UserState.html",[3,0.138,4,0.161,8,0.161,12,0.258,25,0.138,26,0.313,42,0.02,46,2.459,47,1.99,48,1.839,55,2.459,57,0.346,58,0.952,69,0.826,77,0.28,89,0.827,119,0.013,120,0.013,121,0.094,122,0.808,125,0.566,131,2.673,168,2.294,175,3.592,259,1.549,283,2.112,284,2.115,483,2.733,484,3.13,500,2.279,519,4.774,530,3.456,534,4.427,557,2.675,560,0.942,593,2.459,606,2.459,620,3.592,666,3.956,667,1.871,670,4.466,671,3.956,672,4.056,673,2.946,675,3.592,676,3.956,677,3.956,822,2.946,837,3.222,839,1.871,916,2.675,920,2.675,924,2.675,925,2.946,949,2.946,950,3.308,951,2.946,952,2.946,953,3.308,954,4.442,955,4.442,956,3.308,957,3.308]],["title/coverage.html",[958,4.279]],["body/coverage.html",[0,1.141,1,0.872,2,1.824,8,0.104,9,2.146,10,1.911,11,2.146,27,1.478,28,1.478,31,1.595,42,0.02,57,0.167,65,3.844,91,0.872,93,0.828,96,0.828,98,0.828,100,0.828,102,0.872,104,0.872,106,0.828,108,0.872,110,0.828,112,0.872,114,0.828,119,0.01,120,0.01,121,0.176,123,2.634,124,2.634,143,1.954,145,2.146,146,2.146,158,1.213,174,2.146,211,1.911,212,1.911,213,2.146,230,2.146,234,0.872,241,1.911,252,2.146,260,1.478,262,1.911,270,1.519,271,3.112,274,0.828,280,1.022,285,0.918,287,1.144,289,1.144,291,1.144,302,3.506,307,2.093,314,1.595,316,1.022,318,1.291,338,4.796,395,3.506,399,2.244,455,1.911,456,1.911,476,2.901,482,1.595,483,0.968,485,1.478,500,1.478,530,2.244,538,1.595,554,1.735,555,2.146,559,1.735,560,0.611,576,1.735,583,1.735,589,2.146,591,1.735,612,2.146,627,3.257,658,2.146,664,1.735,665,3.915,669,1.911,672,2.634,674,1.911,683,1.291,684,2.994,690,1.08,692,0.918,693,1.213,695,1.291,698,1.291,704,3.506,705,1.911,783,2.146,786,1.478,815,1.911,816,2.146,833,1.213,834,3.257,835,1.291,838,1.213,840,1.213,844,1.213,845,2.146,854,2.901,856,1.911,865,2.901,876,2.146,877,2.146,891,2.146,896,1.911,897,2.146,916,1.735,920,1.735,924,1.735,934,2.146,949,3.915,951,1.911,952,1.911,958,2.146,959,2.502,960,2.502,961,2.502,962,2.502,963,2.146,964,7.491,965,2.146,966,7.427,967,3.257,968,2.146,969,2.146,970,2.146,971,2.502,972,6.031,973,6.686,974,6.686,975,6.031,976,6.031,977,3.799,978,3.799,979,3.799,980,4.727,981,4.592,982,3.799,983,3.799,984,3.937,985,2.146,986,5.328,987,2.146,988,2.146,989,3.799,990,2.502,991,2.502,992,2.502,993,3.937,994,2.146,995,3.799,996,2.502,997,3.799,998,3.799,999,2.502,1000,2.502,1001,2.502,1002,2.502,1003,2.502,1004,3.799,1005,2.502,1006,2.502,1007,2.502,1008,2.146,1009,2.146,1010,2.502,1011,2.502]],["title/dependencies.html",[926,3.354,1012,2.325]],["body/dependencies.html",[42,0.02,71,1.291,119,0.016,120,0.016,165,2.044,201,2.911,202,2.158,203,2.726,586,4.035,606,4.033,926,4.035,1013,5.284,1014,7.427,1015,5.284,1016,6.327,1017,6.327,1018,5.284,1019,6.773,1020,5.284,1021,5.284,1022,5.284,1023,5.284,1024,5.284,1025,5.284,1026,5.284,1027,5.284]],["title/index.html",[25,0.109,279,1.476,1028,3.045]],["body/index.html",[0,1.031,4,0.176,42,0.014,89,0.494,119,0.014,120,0.014,158,2.046,167,2.177,175,2.925,199,3.221,209,3.221,304,2.689,337,2.925,365,4.713,502,2.689,858,4.713,902,3.617,905,3.221,1012,4.197,1029,3.617,1030,6.113,1031,4.218,1032,6.113,1033,6.113,1034,3.221,1035,4.218,1036,4.218,1037,6.886,1038,7.111,1039,7.013,1040,4.218,1041,4.218,1042,4.218,1043,4.218,1044,4.218,1045,4.218,1046,4.218,1047,4.218,1048,4.218,1049,4.218,1050,6.113,1051,6.113,1052,4.218,1053,6.477,1054,4.218,1055,4.218,1056,4.218,1057,4.218,1058,5.496,1059,5.496,1060,6.477,1061,5.496,1062,5.496,1063,4.218,1064,6.886,1065,4.218,1066,4.218,1067,4.218,1068,6.477,1069,4.218,1070,4.218,1071,4.218,1072,4.218,1073,4.218,1074,4.218,1075,6.113,1076,4.218,1077,4.218,1078,3.221,1079,4.218,1080,6.717,1081,5.759,1082,6.477,1083,4.218,1084,4.218,1085,3.617,1086,5.496,1087,4.218,1088,6.477,1089,4.218,1090,4.218,1091,4.218,1092,4.218,1093,4.218,1094,4.218,1095,5.496,1096,5.496,1097,4.218,1098,4.218,1099,4.218,1100,4.218,1101,4.218,1102,4.218]],["title/modules.html",[307,2.749]],["body/modules.html",[42,0.018,119,0.018,120,0.018,307,3.28]],["title/overview.html",[1078,3.811]],["body/overview.html",[2,1.94,42,0.017,119,0.017,120,0.017,122,1.228,144,2.843,652,5.028,661,5.028,1078,4.477,1103,5.863]],["title/properties.html",[26,0.265,1012,2.325]],["body/properties.html",[26,0.357,42,0.018,119,0.018,120,0.018,1034,4.512,1104,5.909]],["title/miscellaneous/typealiases.html",[1105,2.111,1106,4.393]],["body/miscellaneous/typealiases.html",[3,0.241,14,1.289,15,2.302,25,0.139,42,0.02,57,0.437,62,0.952,70,1.357,119,0.014,120,0.014,123,2.702,124,3.617,125,0.715,129,4.472,133,4.472,134,1.89,135,3.341,136,3.475,137,4.67,138,3.979,139,4.293,140,4.67,141,4.67,142,4.67,231,3.239,241,2.975,245,4.472,246,4.472,247,4.109,248,2.975,249,4.847,250,2.702,251,2.702,253,2.484,262,2.975,266,4.472,267,2.891,268,5.993,269,5.993,327,1.682,374,1.591,560,0.952,684,2.011,691,2.873,692,1.43,700,2.873,701,1.357,702,1.289,797,3.341,1085,3.341,1105,2.702,1107,3.897,1108,3.341,1109,5.216,1110,3.897,1111,5.216,1112,3.897]],["title/miscellaneous/variables.html",[744,3.354,1105,2.111]],["body/miscellaneous/variables.html",[0,0.473,2,2.004,3,0.1,20,0.564,25,0.061,31,1.788,42,0.02,44,1.311,46,1.788,47,2.901,48,1.546,50,2.278,51,2.165,55,1.088,57,0.446,58,0.397,89,0.535,93,0.564,96,1.369,98,1.182,100,0.564,106,0.564,110,0.564,114,0.564,119,0.007,120,0.007,123,1.183,124,1.945,125,0.307,132,1.463,138,3.07,168,2.063,172,1.088,175,3.603,177,1.968,178,1.303,179,1.244,195,1.303,196,1.945,198,1.463,251,1.945,259,1.843,270,2.209,274,2.24,275,0.827,283,1.546,284,1.69,285,1.029,299,1.81,302,1.303,303,2.477,307,2.519,318,2.537,327,1.211,374,0.697,378,3.548,395,1.303,399,2.445,424,2.477,433,1.463,450,2.405,476,1.303,477,3.504,483,2.239,484,2.972,500,2.702,502,1.788,509,2.728,512,1.463,519,3.16,530,2.111,534,4.325,538,1.788,547,1.303,554,1.183,557,3.763,558,4.184,560,1.414,576,1.945,583,2.477,591,1.945,593,2.915,620,1.945,664,1.183,665,1.303,666,2.142,667,1.36,668,1.463,669,2.142,670,3.16,671,3.16,672,3.603,673,2.142,674,2.728,675,2.869,676,3.491,677,3.491,678,1.463,679,1.463,680,1.463,681,1.463,682,1.463,686,1.968,692,1.804,704,1.303,705,2.142,744,1.303,822,1.303,837,2.28,839,0.827,843,1.008,854,3.968,856,2.728,865,1.303,905,3.16,916,2.477,920,1.945,924,1.945,949,1.303,950,1.463,951,2.142,952,2.728,953,1.463,954,2.405,955,2.405,956,1.463,957,1.463,963,1.463,965,2.405,967,1.463,968,2.405,969,1.463,970,1.463,980,1.463,984,1.463,985,2.405,986,1.463,987,2.405,988,2.405,993,1.463,994,2.405,1008,1.463,1009,1.463,1029,2.405,1034,1.303,1081,2.405,1105,1.183,1108,1.463,1113,1.706,1114,4.573,1115,3.572,1116,2.805,1117,2.805,1118,1.706,1119,2.805,1120,1.706,1121,3.572,1122,2.805,1123,1.706,1124,1.706,1125,3.572,1126,1.706,1127,3.572,1128,5.427,1129,1.706,1130,1.706,1131,1.706,1132,1.706,1133,1.706,1134,1.706,1135,2.805,1136,1.706,1137,1.706,1138,2.805,1139,5.427,1140,5.196,1141,4.138,1142,4.573,1143,1.706,1144,3.572,1145,1.706,1146,1.706,1147,2.805,1148,3.572,1149,1.706,1150,1.706,1151,3.572,1152,2.805,1153,1.706,1154,4.917,1155,2.805,1156,2.805,1157,2.805,1158,2.805,1159,2.805,1160,2.805,1161,1.706,1162,2.805,1163,1.706,1164,4.138,1165,1.706,1166,1.706,1167,1.706,1168,1.706,1169,1.706,1170,1.706,1171,1.706,1172,1.706,1173,1.706,1174,5.427,1175,1.706,1176,1.706,1177,1.706,1178,1.706,1179,1.706,1180,2.805,1181,1.706]]],"invertedIndex":[["",{"_index":42,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":65,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CityComponent.html":{},"injectables/DashboardService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":1104,"title":{},"body":{"properties.html":{}}}],["0.14.3",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":637,"title":{},"body":{"injectables/DashboardService.html":{},"components/StarRatingComponent.html":{}}}],["1/1",{"_index":966,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":338,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"coverage.html":{}}}],["11",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["11/15",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":1096,"title":{},"body":{"index.html":{}}}],["13",{"_index":1103,"title":{},"body":{"overview.html":{}}}],["14/14",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["17.2.0",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["17.3.0",{"_index":1014,"title":{},"body":{"dependencies.html":{}}}],["17.3.5",{"_index":1035,"title":{},"body":{"index.html":{}}}],["2",{"_index":391,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["2.3.0",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":627,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{}}}],["24",{"_index":661,"title":{},"body":{"injectables/DashboardService.html":{},"overview.html":{}}}],["25",{"_index":975,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":372,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["3/3",{"_index":1004,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1002,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":634,"title":{},"body":{"injectables/DashboardService.html":{}}}],["33",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":644,"title":{},"body":{"injectables/DashboardService.html":{},"components/StarRatingComponent.html":{}}}],["4/5",{"_index":998,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":228,"title":{},"body":{"components/BarChartComponent.html":{}}}],["5",{"_index":229,"title":{},"body":{"components/BarChartComponent.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/StarRatingComponent.html":{}}}],["5.3.3",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":171,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["53",{"_index":659,"title":{},"body":{"injectables/DashboardService.html":{}}}],["55",{"_index":657,"title":{},"body":{"injectables/DashboardService.html":{}}}],["6",{"_index":647,"title":{},"body":{"injectables/DashboardService.html":{}}}],["6/6",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":983,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":990,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":989,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":650,"title":{},"body":{"injectables/DashboardService.html":{}}}],["7.8.0",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":226,"title":{},"body":{"components/BarChartComponent.html":{},"injectables/DashboardService.html":{}}}],["7000",{"_index":132,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"miscellaneous/variables.html":{}}}],["71",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":658,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{}}}],["75",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":652,"title":{},"body":{"injectables/DashboardService.html":{},"overview.html":{}}}],["8/8",{"_index":1003,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["82",{"_index":662,"title":{},"body":{"injectables/DashboardService.html":{}}}],["85",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["89",{"_index":660,"title":{},"body":{"injectables/DashboardService.html":{}}}],["9",{"_index":654,"title":{},"body":{"injectables/DashboardService.html":{}}}],["9733",{"_index":895,"title":{},"body":{"components/StarRatingComponent.html":{}}}],["access",{"_index":822,"title":{},"body":{"injectables/LoginGuard.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["account",{"_index":795,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["action",{"_index":558,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":564,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/UserEffects.html":{}}}],["actual_component",{"_index":118,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["add",{"_index":1071,"title":{},"body":{"index.html":{}}}],["address",{"_index":298,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["alert",{"_index":14,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"miscellaneous/typealiases.html":{}}}],["alertpopupcomponent",{"_index":1,"title":{"components/AlertPopupComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["alertpopupconfig",{"_index":27,"title":{"interfaces/AlertPopupConfig.html":{}},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"coverage.html":{}}}],["alertpopupconfig().label",{"_index":82,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["alertpopupservice",{"_index":28,"title":{"injectables/AlertPopupService.html":{}},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{},"coverage.html":{}}}],["alertpopupsubject",{"_index":147,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{}}}],["alertpopuptype",{"_index":129,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"miscellaneous/typealiases.html":{}}}],["alerttype",{"_index":126,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/FormComponent.html":{}}}],["aliases",{"_index":1107,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":821,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["allowing",{"_index":829,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["angeles",{"_index":641,"title":{},"body":{"injectables/DashboardService.html":{}}}],["angular",{"_index":1032,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1013,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":201,"title":{},"body":{"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":624,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["angular/compiler",{"_index":1015,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":71,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":202,"title":{},"body":{"components/AppComponent.html":{},"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":1016,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":203,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"injectables/LoginGuard.html":{},"injectables/UserEffects.html":{},"dependencies.html":{}}}],["api",{"_index":1081,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["app.component.html",{"_index":180,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":181,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":91,"title":{"components/AppComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":965,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":175,"title":{},"body":{"components/AppComponent.html":{},"interfaces/UserState.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["applicationconfig",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":509,"title":{},"body":{"components/DashboardComponent.html":{},"components/FormComponent.html":{},"miscellaneous/variables.html":{}}}],["artifacts",{"_index":1054,"title":{},"body":{"index.html":{}}}],["assets",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/yanchware_logo.svg",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/yanchwarego_logo.svg",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/yanchwarego_mini_logo.svg",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":1044,"title":{},"body":{"index.html":{}}}],["averagetemperature",{"_index":300,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["back",{"_index":405,"title":{},"body":{"components/CityComponent.html":{}}}],["backgroundsrc",{"_index":696,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{}}}],["bar",{"_index":94,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["bar__orange",{"_index":227,"title":{},"body":{"components/BarChartComponent.html":{}}}],["barchartcomponent",{"_index":93,"title":{"components/BarChartComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":325,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardEffects.html":{}}}],["baseurl",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":828,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["between",{"_index":432,"title":{},"body":{"components/CityComponent.html":{}}}],["bg",{"_index":268,"title":{},"body":{"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["boolean",{"_index":130,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"injectables/LoginGuard.html":{}}}],["bootstrap",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["border",{"_index":269,"title":{},"body":{"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["boston",{"_index":655,"title":{},"body":{"injectables/DashboardService.html":{}}}],["break",{"_index":551,"title":{},"body":{"components/DashboardComponent.html":{}}}],["browser",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}],["btn",{"_index":247,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"miscellaneous/typealiases.html":{}}}],["build",{"_index":1053,"title":{},"body":{"index.html":{}}}],["button",{"_index":231,"title":{},"body":{"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/NavBarComponent.html":{},"miscellaneous/typealiases.html":{}}}],["button'},{'name",{"_index":97,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["button.component.html",{"_index":232,"title":{},"body":{"components/ButtonComponent.html":{}}}],["button.component.scss",{"_index":233,"title":{},"body":{"components/ButtonComponent.html":{}}}],["button.id",{"_index":546,"title":{},"body":{"components/DashboardComponent.html":{}}}],["button.model",{"_index":689,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/NavbarConfig.html":{},"interfaces/TitleFormModel.html":{}}}],["button/button.component",{"_index":742,"title":{},"body":{"components/FormComponent.html":{},"components/NavBarComponent.html":{}}}],["buttonclasstype",{"_index":245,"title":{},"body":{"interfaces/ButtonConfig.html":{},"miscellaneous/typealiases.html":{}}}],["buttoncomponent",{"_index":96,"title":{"components/ButtonComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["buttonconfig",{"_index":234,"title":{"interfaces/ButtonConfig.html":{}},"body":{"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["buttonconfig().label",{"_index":240,"title":{},"body":{"components/ButtonComponent.html":{}}}],["buttonelement",{"_index":310,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{}}}],["buttonelements",{"_index":694,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["buttonlogoutconfig",{"_index":480,"title":{},"body":{"components/DashboardComponent.html":{}}}],["buttonsnavbar",{"_index":481,"title":{},"body":{"components/DashboardComponent.html":{}}}],["buttonsnavbarend",{"_index":524,"title":{},"body":{"components/DashboardComponent.html":{},"interfaces/NavbarConfig.html":{}}}],["buttonsnavbarstart",{"_index":522,"title":{},"body":{"components/DashboardComponent.html":{},"interfaces/NavbarConfig.html":{}}}],["buttontype",{"_index":246,"title":{},"body":{"interfaces/ButtonConfig.html":{},"miscellaneous/typealiases.html":{}}}],["c",{"_index":467,"title":{},"body":{"components/CityComponent.html":{}}}],["called",{"_index":332,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["canactivate",{"_index":817,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["capabilities",{"_index":1073,"title":{},"body":{"index.html":{}}}],["card",{"_index":253,"title":{},"body":{"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"miscellaneous/typealiases.html":{}}}],["card'},{'name",{"_index":99,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["card.component.html",{"_index":254,"title":{},"body":{"components/CardComponent.html":{}}}],["card.component.scss",{"_index":255,"title":{},"body":{"components/CardComponent.html":{}}}],["card/card.component",{"_index":743,"title":{},"body":{"components/FormComponent.html":{}}}],["cardbodycustomclass",{"_index":264,"title":{},"body":{"interfaces/CardConfig.html":{},"components/FormComponent.html":{}}}],["cardcomponent",{"_index":98,"title":{"components/CardComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardconfig",{"_index":260,"title":{"interfaces/CardConfig.html":{}},"body":{"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"coverage.html":{}}}],["cardcustomclass",{"_index":265,"title":{},"body":{"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{}}}],["cardmodel",{"_index":256,"title":{},"body":{"components/CardComponent.html":{},"components/FormComponent.html":{}}}],["cardtype",{"_index":266,"title":{},"body":{"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["case",{"_index":549,"title":{},"body":{"components/DashboardComponent.html":{}}}],["certain",{"_index":67,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["change",{"_index":1046,"title":{},"body":{"index.html":{}}}],["changes",{"_index":721,"title":{},"body":{"components/FormComponent.html":{}}}],["chart",{"_index":214,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart'},{'name",{"_index":95,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["chart.component",{"_index":454,"title":{},"body":{"components/CityComponent.html":{}}}],["chart.component.html",{"_index":215,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.scss",{"_index":216,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts",{"_index":213,"title":{},"body":{"components/BarChartComponent.html":{},"coverage.html":{}}}],["chart.component.ts:19",{"_index":223,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:25",{"_index":224,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:30",{"_index":218,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart/bar",{"_index":212,"title":{},"body":{"components/BarChartComponent.html":{},"components/CityComponent.html":{},"coverage.html":{}}}],["check",{"_index":1077,"title":{},"body":{"index.html":{}}}],["checks",{"_index":827,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["chicago",{"_index":645,"title":{},"body":{"injectables/DashboardService.html":{}}}],["choice",{"_index":1067,"title":{},"body":{"index.html":{}}}],["choose",{"_index":365,"title":{},"body":{"components/CitiesComponent.html":{},"index.html":{}}}],["cities",{"_index":270,"title":{"interfaces/Cities.html":{}},"body":{"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cities'},{'name",{"_index":101,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["cities(getcitiespayload",{"_index":595,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["cities.component.html",{"_index":308,"title":{},"body":{"components/CitiesComponent.html":{}}}],["cities.component.scss",{"_index":309,"title":{},"body":{"components/CitiesComponent.html":{}}}],["citiescomponent",{"_index":100,"title":{"components/CitiesComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["citieslist",{"_index":311,"title":{},"body":{"components/CitiesComponent.html":{}}}],["citieslistfiltered",{"_index":312,"title":{},"body":{"components/CitiesComponent.html":{}}}],["citiessuccess",{"_index":583,"title":{},"body":{"injectables/DashboardEffects.html":{},"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["city",{"_index":274,"title":{"interfaces/City.html":{}},"body":{"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["city'},{'name",{"_index":103,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["city().climate.averagetemperature",{"_index":466,"title":{},"body":{"components/CityComponent.html":{}}}],["city().climate.rainfall",{"_index":468,"title":{},"body":{"components/CityComponent.html":{}}}],["city().country",{"_index":463,"title":{},"body":{"components/CityComponent.html":{}}}],["city().coworkingspaces",{"_index":470,"title":{},"body":{"components/CityComponent.html":{}}}],["city().name",{"_index":462,"title":{},"body":{"components/CityComponent.html":{}}}],["city.component.html",{"_index":397,"title":{},"body":{"components/CityComponent.html":{}}}],["city.component.scss",{"_index":398,"title":{},"body":{"components/CityComponent.html":{}}}],["city.country",{"_index":394,"title":{},"body":{"components/CitiesComponent.html":{}}}],["city.name",{"_index":393,"title":{},"body":{"components/CitiesComponent.html":{}}}],["city.name.tolowercase().includes(this.cityfiltername().tolowercase",{"_index":355,"title":{},"body":{"components/CitiesComponent.html":{}}}],["citycomponent",{"_index":102,"title":{"components/CityComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["cityfiltername",{"_index":313,"title":{},"body":{"components/CitiesComponent.html":{}}}],["cityid",{"_index":276,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["cityinforesponse",{"_index":285,"title":{"interfaces/CityInfoResponse.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":62,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"miscellaneous/typealiases.html":{}}}],["classbuttontype",{"_index":242,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["cleanup",{"_index":490,"title":{},"body":{"components/DashboardComponent.html":{}}}],["clearinterval(this.timer",{"_index":173,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["cleartimeout(this.timer",{"_index":81,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["cli",{"_index":1033,"title":{},"body":{"index.html":{}}}],["click",{"_index":499,"title":{},"body":{"components/DashboardComponent.html":{}}}],["clicked",{"_index":870,"title":{},"body":{"components/NavBarComponent.html":{}}}],["climate",{"_index":291,"title":{"interfaces/Climate.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["code",{"_index":1048,"title":{},"body":{"index.html":{}}}],["collection",{"_index":272,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["command",{"_index":1068,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":177,"title":{},"body":{"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"miscellaneous/variables.html":{}}}],["component",{"_index":0,"title":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["component's",{"_index":363,"title":{},"body":{"components/CitiesComponent.html":{}}}],["component_template",{"_index":88,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["computed",{"_index":349,"title":{},"body":{"components/CitiesComponent.html":{},"components/DashboardComponent.html":{}}}],["config",{"_index":258,"title":{},"body":{"components/CardComponent.html":{}}}],["configuration",{"_index":44,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":161,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/DashboardComponent.html":{}}}],["confirm",{"_index":881,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["console.log('form",{"_index":762,"title":{},"body":{"components/FormComponent.html":{}}}],["console.log('token",{"_index":806,"title":{},"body":{"components/LoginComponent.html":{}}}],["const",{"_index":131,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"injectables/UserEffects.html":{},"interfaces/UserState.html":{}}}],["constant",{"_index":377,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["constants/endpoints",{"_index":857,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["constants/images",{"_index":810,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["constants/route",{"_index":809,"title":{},"body":{"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["constructor(http",{"_index":614,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["constructor(private",{"_index":608,"title":{},"body":{"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["constructor(router",{"_index":818,"title":{},"body":{"injectables/LoginGuard.html":{},"injectables/UserEffects.html":{}}}],["constructor(store",{"_index":592,"title":{},"body":{"injectables/DashboardFacade.html":{},"injectables/UserFacade.html":{}}}],["containing",{"_index":620,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":512,"title":{},"body":{"components/DashboardComponent.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":163,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/FormComponent.html":{}}}],["core/components/cities/cities.component",{"_index":544,"title":{},"body":{"components/DashboardComponent.html":{}}}],["core/models/dashboard.model",{"_index":625,"title":{},"body":{"injectables/DashboardService.html":{}}}],["core/models/user.model",{"_index":853,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["core/store/user/user.facade",{"_index":542,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["core/store/user/user.reducer",{"_index":543,"title":{},"body":{"components/DashboardComponent.html":{}}}],["costoflivingindex",{"_index":286,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["count",{"_index":273,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["country",{"_index":277,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["coverage",{"_index":958,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["coworking",{"_index":296,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["coworkingspace",{"_index":289,"title":{"interfaces/CoworkingSpace.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["coworkingspace.address",{"_index":473,"title":{},"body":{"components/CityComponent.html":{}}}],["coworkingspace.name",{"_index":472,"title":{},"body":{"components/CityComponent.html":{}}}],["coworkingspaces",{"_index":288,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["create",{"_index":796,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["createaction('[city",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createaction('[dashboard",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createaction('[user",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createeffect",{"_index":569,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["createfeatureselector(dashboardfeaturekey",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createfeatureselector(userfeaturekey",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createreducer",{"_index":666,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["createselector(getdashboardfeature",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(getuserfeature",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creator",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["css",{"_index":61,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["current",{"_index":676,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":60,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/ButtonComponent.html":{},"components/FormComponent.html":{}}}],["customclass",{"_index":29,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["danger",{"_index":139,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"components/FormComponent.html":{},"miscellaneous/typealiases.html":{}}}],["dark",{"_index":142,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["dashboard",{"_index":477,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"injectables/UserEffects.html":{},"miscellaneous/variables.html":{}}}],["dashboard'},{'name",{"_index":105,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["dashboard.actions",{"_index":588,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{}}}],["dashboard.component.html",{"_index":478,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.component.scss",{"_index":479,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.selectors",{"_index":607,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["dashboardcomponent",{"_index":104,"title":{"components/DashboardComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["dashboardeffects",{"_index":554,"title":{"injectables/DashboardEffects.html":{}},"body":{"injectables/DashboardEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dashboardfacade",{"_index":314,"title":{"injectables/DashboardFacade.html":{}},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"injectables/DashboardFacade.html":{},"coverage.html":{}}}],["dashboardfeaturekey",{"_index":669,"title":{},"body":{"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dashboardreducer",{"_index":674,"title":{},"body":{"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dashboardservice",{"_index":559,"title":{"injectables/DashboardService.html":{}},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"coverage.html":{}}}],["dashboardstate",{"_index":664,"title":{"interfaces/DashboardState.html":{}},"body":{"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":299,"title":{},"body":{"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"injectables/LoginRegisterService.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"miscellaneous/variables.html":{}}}],["decoration",{"_index":503,"title":{},"body":{"components/DashboardComponent.html":{}}}],["default",{"_index":50,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":36,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"interfaces/FormOutputModel.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["defines",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":926,"title":{"dependencies.html":{}},"body":{"injectables/UserEffects.html":{},"dependencies.html":{}}}],["description",{"_index":12,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{}}}],["destination",{"_index":367,"title":{},"body":{"components/CitiesComponent.html":{}}}],["destroy",{"_index":315,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["destroyed",{"_index":333,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["destruction",{"_index":413,"title":{},"body":{"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["detailed",{"_index":622,"title":{},"body":{"injectables/DashboardService.html":{}}}],["determines",{"_index":219,"title":{},"body":{"components/BarChartComponent.html":{},"injectables/LoginGuard.html":{}}}],["dev",{"_index":1041,"title":{},"body":{"index.html":{}}}],["development",{"_index":1036,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["direct",{"_index":1091,"title":{},"body":{"index.html":{}}}],["directive",{"_index":86,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["directives",{"_index":117,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1052,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1057,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":238,"title":{},"body":{"components/ButtonComponent.html":{}}}],["dispatched",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatches",{"_index":579,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/UserFacade.html":{}}}],["displayed",{"_index":220,"title":{},"body":{"components/BarChartComponent.html":{}}}],["displaying",{"_index":13,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["dist",{"_index":1056,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["don’t",{"_index":794,"title":{},"body":{"components/LoginComponent.html":{}}}],["download",{"_index":294,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["duration",{"_index":68,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["dynamic",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1065,"title":{},"body":{"index.html":{}}}],["each",{"_index":511,"title":{},"body":{"components/DashboardComponent.html":{}}}],["effect",{"_index":578,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["effects",{"_index":556,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["element",{"_index":85,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["element)[0",{"_index":443,"title":{},"body":{"components/CityComponent.html":{}}}],["email",{"_index":701,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"miscellaneous/typealiases.html":{}}}],["emit",{"_index":160,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["emits",{"_index":414,"title":{},"body":{"components/CityComponent.html":{},"components/FormComponent.html":{},"injectables/LoginRegisterService.html":{}}}],["emitted",{"_index":718,"title":{},"body":{"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{}}}],["empty",{"_index":681,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":1064,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoints",{"_index":856,"title":{},"body":{"injectables/LoginRegisterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":854,"title":{},"body":{"injectables/LoginRegisterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environments/environment",{"_index":855,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["errors",{"_index":761,"title":{},"body":{"components/FormComponent.html":{}}}],["event",{"_index":436,"title":{},"body":{"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{}}}],["event.urlafterredirects",{"_index":440,"title":{},"body":{"components/CityComponent.html":{}}}],["events",{"_index":446,"title":{},"body":{"components/CityComponent.html":{}}}],["execute",{"_index":1061,"title":{},"body":{"index.html":{}}}],["explore",{"_index":336,"title":{},"body":{"components/CitiesComponent.html":{}}}],["export",{"_index":77,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{}}}],["extracts",{"_index":449,"title":{},"body":{"components/CityComponent.html":{}}}],["facade",{"_index":590,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["false",{"_index":172,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"injectables/LoginGuard.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":557,"title":{},"body":{"injectables/DashboardEffects.html":{},"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["feel",{"_index":1099,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":597,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["fetching",{"_index":599,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{}}}],["files",{"_index":1047,"title":{},"body":{"index.html":{}}}],["filter",{"_index":208,"title":{},"body":{"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/LoginComponent.html":{}}}],["filter((city",{"_index":417,"title":{},"body":{"components/CityComponent.html":{}}}],["filter((event",{"_index":435,"title":{},"body":{"components/CityComponent.html":{}}}],["filter(boolean",{"_index":188,"title":{},"body":{"components/AppComponent.html":{}}}],["filtercities",{"_index":319,"title":{},"body":{"components/CitiesComponent.html":{}}}],["filtercities(searchcity",{"_index":322,"title":{},"body":{"components/CitiesComponent.html":{}}}],["filtered",{"_index":357,"title":{},"body":{"components/CitiesComponent.html":{}}}],["filters",{"_index":324,"title":{},"body":{"components/CitiesComponent.html":{}}}],["first",{"_index":1070,"title":{},"body":{"index.html":{}}}],["fixme",{"_index":629,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["follow",{"_index":1092,"title":{},"body":{"index.html":{}}}],["following",{"_index":1085,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["footer",{"_index":685,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{}}}],["footerlogo",{"_index":699,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["footerlogomodel",{"_index":683,"title":{"interfaces/FooterLogoModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["footertext",{"_index":697,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["footertextmodel",{"_index":698,"title":{"interfaces/FooterTextModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["for(button",{"_index":874,"title":{},"body":{"components/NavBarComponent.html":{}}}],["for(inputelement",{"_index":770,"title":{},"body":{"components/FormComponent.html":{}}}],["form",{"_index":374,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["form'},{'name",{"_index":107,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["form.component.html",{"_index":706,"title":{},"body":{"components/FormComponent.html":{}}}],["form.component.scss",{"_index":707,"title":{},"body":{"components/FormComponent.html":{}}}],["form__card",{"_index":731,"title":{},"body":{"components/FormComponent.html":{}}}],["formbuilder",{"_index":709,"title":{},"body":{"components/FormComponent.html":{}}}],["formcomponent",{"_index":106,"title":{"components/FormComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["formcontrol",{"_index":726,"title":{},"body":{"components/FormComponent.html":{}}}],["formgroup",{"_index":733,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel",{"_index":316,"title":{"interfaces/FormModel.html":{}},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["formmodel().buttonelements",{"_index":775,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().footerlogo?.label",{"_index":780,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().footertext?.labellink",{"_index":778,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().footertext?.text",{"_index":777,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().inputelements",{"_index":771,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().title?.label",{"_index":769,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().type",{"_index":774,"title":{},"body":{"components/FormComponent.html":{}}}],["formoutputmodel",{"_index":690,"title":{"interfaces/FormOutputModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["formoutputmodel['email",{"_index":813,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["formoutputmodel['name",{"_index":889,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["formoutputmodel['password",{"_index":814,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["formoutputmodel['surname",{"_index":890,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["found",{"_index":474,"title":{},"body":{"components/CityComponent.html":{}}}],["francisco",{"_index":643,"title":{},"body":{"injectables/DashboardService.html":{}}}],["free",{"_index":1100,"title":{},"body":{"index.html":{}}}],["function",{"_index":673,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["functionality",{"_index":568,"title":{},"body":{"injectables/DashboardEffects.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{}}}],["further",{"_index":1074,"title":{},"body":{"index.html":{}}}],["g",{"_index":1087,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1050,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1031,"title":{},"body":{"index.html":{}}}],["getcities",{"_index":613,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getcities(getcitiespayload",{"_index":581,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["getcities(undefined",{"_index":618,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getcitiespayload",{"_index":280,"title":{"interfaces/GetCitiesPayload.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["getcity",{"_index":399,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcity(cityid",{"_index":574,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{}}}],["getcitysuccess",{"_index":576,"title":{},"body":{"injectables/DashboardEffects.html":{},"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdashboardfeature",{"_index":985,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":279,"title":{"index.html":{}},"body":{"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["getuserfeature",{"_index":994,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":728,"title":{},"body":{"components/FormComponent.html":{}}}],["globally",{"_index":1084,"title":{},"body":{"index.html":{}}}],["go",{"_index":199,"title":{},"body":{"components/AppComponent.html":{},"components/CityComponent.html":{},"index.html":{}}}],["guard",{"_index":826,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["h",{"_index":407,"title":{},"body":{"components/CityComponent.html":{}}}],["handle",{"_index":754,"title":{},"body":{"components/FormComponent.html":{}}}],["handles",{"_index":498,"title":{},"body":{"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["handling",{"_index":567,"title":{},"body":{"injectables/DashboardEffects.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{}}}],["hardcoded",{"_index":631,"title":{},"body":{"injectables/DashboardService.html":{}}}],["help",{"_index":1075,"title":{},"body":{"index.html":{}}}],["hide",{"_index":40,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["hides",{"_index":150,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["homepage",{"_index":507,"title":{},"body":{"components/DashboardComponent.html":{}}}],["hook",{"_index":331,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["html",{"_index":84,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["http",{"_index":617,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["http://localhost:1234",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1043,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":615,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["id",{"_index":243,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["identifier",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":668,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["if(formmodel().backgroundsrc",{"_index":766,"title":{},"body":{"components/FormComponent.html":{}}}],["if(formmodel().footerlogo",{"_index":779,"title":{},"body":{"components/FormComponent.html":{}}}],["if(formmodel().footertext",{"_index":776,"title":{},"body":{"components/FormComponent.html":{}}}],["if(formmodel().logosrc",{"_index":767,"title":{},"body":{"components/FormComponent.html":{}}}],["if(formmodel().title",{"_index":768,"title":{},"body":{"components/FormComponent.html":{}}}],["if(isvisible",{"_index":210,"title":{},"body":{"components/AppComponent.html":{}}}],["if(navbarconfig().imglogo",{"_index":872,"title":{},"body":{"components/NavBarComponent.html":{}}}],["image",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["images",{"_index":538,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["images.yanchware_logo",{"_index":800,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["images.yanchwarego_logo",{"_index":789,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["images.yanchwarego_mini_logo",{"_index":521,"title":{},"body":{"components/DashboardComponent.html":{}}}],["imglogo",{"_index":520,"title":{},"body":{"components/DashboardComponent.html":{},"interfaces/NavbarConfig.html":{}}}],["implements",{"_index":304,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"index.html":{}}}],["import",{"_index":69,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{}}}],["imports",{"_index":76,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["include",{"_index":135,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"miscellaneous/typealiases.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":781,"title":{},"body":{"interfaces/FormOutputModel.html":{}}}],["indicate",{"_index":1145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicates",{"_index":195,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":284,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["initial",{"_index":670,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["initialized",{"_index":335,"title":{},"body":{"components/CitiesComponent.html":{}}}],["initializes",{"_index":38,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["initialstate",{"_index":672,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiate",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":53,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{}}}],["inject(actions",{"_index":561,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["inject(alertpopupservice",{"_index":52,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{}}}],["inject(dashboardfacade",{"_index":359,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["inject(dashboardservice",{"_index":565,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["inject(formbuilder",{"_index":735,"title":{},"body":{"components/FormComponent.html":{}}}],["inject(loginregisterservice",{"_index":802,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{}}}],["inject(router",{"_index":429,"title":{},"body":{"components/CityComponent.html":{}}}],["inject(userfacade",{"_index":536,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["injectable",{"_index":143,"title":{"injectables/AlertPopupService.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}},"body":{"injectables/AlertPopupService.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"coverage.html":{}}}],["injectables",{"_index":144,"title":{},"body":{"injectables/AlertPopupService.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"overview.html":{}}}],["input",{"_index":70,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{}}}],["input(false",{"_index":225,"title":{},"body":{"components/BarChartComponent.html":{},"components/ButtonComponent.html":{}}}],["input.inputvalidator",{"_index":749,"title":{},"body":{"components/FormComponent.html":{}}}],["input.label.tolowercase().trim",{"_index":747,"title":{},"body":{"components/FormComponent.html":{}}}],["input.required",{"_index":78,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{}}}],["inputelement",{"_index":772,"title":{},"body":{"components/FormComponent.html":{}}}],["inputelement.label",{"_index":773,"title":{},"body":{"components/FormComponent.html":{}}}],["inputelements",{"_index":364,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["inputformmodel",{"_index":693,"title":{"interfaces/InputFormModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["inputformtype",{"_index":700,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{}}}],["inputs",{"_index":34,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{}}}],["inputtype",{"_index":368,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["inputvalidator",{"_index":369,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["install",{"_index":1083,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":437,"title":{},"body":{"components/CityComponent.html":{}}}],["interface",{"_index":121,"title":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{}},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"coverage.html":{}}}],["interfaces",{"_index":122,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"overview.html":{}}}],["internet",{"_index":292,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["internetspeed",{"_index":287,"title":{"interfaces/InternetSpeed.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["invalid",{"_index":763,"title":{},"body":{"components/FormComponent.html":{}}}],["isdisabled",{"_index":235,"title":{},"body":{"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{}}}],["isreverse",{"_index":217,"title":{},"body":{"components/BarChartComponent.html":{}}}],["isvisible",{"_index":127,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{}}}],["json",{"_index":475,"title":{},"body":{"components/CityComponent.html":{}}}],["karma",{"_index":1063,"title":{},"body":{"index.html":{}}}],["key",{"_index":667,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["label",{"_index":128,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/BarChartComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["labellink",{"_index":703,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["las",{"_index":648,"title":{},"body":{"injectables/DashboardService.html":{}}}],["launch",{"_index":1090,"title":{},"body":{"index.html":{}}}],["legend",{"_index":83,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["lifecycle",{"_index":330,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["light",{"_index":141,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["limit",{"_index":281,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["line",{"_index":633,"title":{},"body":{"injectables/DashboardService.html":{}}}],["link",{"_index":248,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/DashboardComponent.html":{},"miscellaneous/typealiases.html":{}}}],["list",{"_index":303,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["listens",{"_index":448,"title":{},"body":{"components/CityComponent.html":{}}}],["local",{"_index":1097,"title":{},"body":{"index.html":{}}}],["localstorage",{"_index":906,"title":{},"body":{"injectables/UserEffects.html":{}}}],["localstorage.getitem('name",{"_index":517,"title":{},"body":{"components/DashboardComponent.html":{}}}],["localstorage.getitem('token",{"_index":830,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["localstorage.removeitem('name",{"_index":933,"title":{},"body":{"injectables/UserEffects.html":{}}}],["localstorage.removeitem('token",{"_index":932,"title":{},"body":{"injectables/UserEffects.html":{}}}],["localstorage.setitem('name",{"_index":929,"title":{},"body":{"injectables/UserEffects.html":{}}}],["localstorage.setitem('token",{"_index":927,"title":{},"body":{"injectables/UserEffects.html":{}}}],["log",{"_index":501,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["logged",{"_index":823,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["logging",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":491,"title":{},"body":{"components/DashboardComponent.html":{}}}],["login",{"_index":560,"title":{},"body":{"injectables/DashboardEffects.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["login'},{'name",{"_index":109,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["login(loginpayload",{"_index":847,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["login(payload",{"_index":936,"title":{},"body":{"injectables/UserFacade.html":{}}}],["login.component.html",{"_index":784,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":785,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":108,"title":{"components/LoginComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["loginguard",{"_index":815,"title":{"injectables/LoginGuard.html":{}},"body":{"injectables/LoginGuard.html":{},"coverage.html":{}}}],["loginpayload",{"_index":833,"title":{"interfaces/LoginPayload.html":{}},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserFacade.html":{},"coverage.html":{}}}],["loginpayload.email.replace",{"_index":861,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["loginregisterservice",{"_index":786,"title":{"injectables/LoginRegisterService.html":{}},"body":{"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"coverage.html":{}}}],["loginresponse",{"_index":838,"title":{"interfaces/LoginResponse.html":{}},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"coverage.html":{}}}],["loginsuccess",{"_index":924,"title":{},"body":{"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loginsuccess({response",{"_index":912,"title":{},"body":{"injectables/UserEffects.html":{}}}],["logo",{"_index":686,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/variables.html":{}}}],["logosrc",{"_index":687,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["logout",{"_index":500,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logoutsuccess",{"_index":916,"title":{},"body":{"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logs",{"_index":547,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["los",{"_index":640,"title":{},"body":{"injectables/DashboardService.html":{}}}],["managing",{"_index":55,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/CitiesComponent.html":{},"injectables/DashboardFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":459,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["map((cities",{"_index":582,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["map((city",{"_index":575,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["map((event",{"_index":439,"title":{},"body":{"components/CityComponent.html":{}}}],["match",{"_index":758,"title":{},"body":{"components/FormComponent.html":{}}}],["matching",{"_index":120,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":626,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mb",{"_index":371,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["methods",{"_index":32,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["miami",{"_index":646,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mini",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1105,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":755,"title":{},"body":{"components/FormComponent.html":{}}}],["mm",{"_index":469,"title":{},"body":{"components/CityComponent.html":{}}}],["mock",{"_index":858,"title":{},"body":{"injectables/LoginRegisterService.html":{},"index.html":{}}}],["mocker",{"_index":1082,"title":{},"body":{"index.html":{}}}],["mockresponse",{"_index":860,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["mode",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":375,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["models/alert",{"_index":72,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["models/button.model",{"_index":239,"title":{},"body":{"components/ButtonComponent.html":{},"components/NavBarComponent.html":{}}}],["models/card.model",{"_index":261,"title":{},"body":{"components/CardComponent.html":{},"components/FormComponent.html":{}}}],["models/dashboard.model",{"_index":387,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{}}}],["models/form.model",{"_index":741,"title":{},"body":{"components/FormComponent.html":{}}}],["models/navbar.model",{"_index":871,"title":{},"body":{"components/NavBarComponent.html":{}}}],["models/user.model",{"_index":922,"title":{},"body":{"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["module",{"_index":705,"title":{},"body":{"components/FormComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":307,"title":{"modules.html":{}},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"coverage.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["modules/services/dashboard.service",{"_index":587,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["modules/services/loginregisterservice.service",{"_index":923,"title":{},"body":{"injectables/UserEffects.html":{}}}],["more",{"_index":1076,"title":{},"body":{"index.html":{}}}],["name",{"_index":89,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["navbar",{"_index":510,"title":{},"body":{"components/DashboardComponent.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{}}}],["navbar'},{'name",{"_index":111,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["navbar.component.html",{"_index":866,"title":{},"body":{"components/NavBarComponent.html":{}}}],["navbar.component.scss",{"_index":867,"title":{},"body":{"components/NavBarComponent.html":{}}}],["navbarcomponent",{"_index":110,"title":{"components/NavBarComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["navbarconfig",{"_index":482,"title":{"interfaces/NavbarConfig.html":{}},"body":{"components/DashboardComponent.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"coverage.html":{}}}],["navbarconfig().buttonsnavbarend",{"_index":875,"title":{},"body":{"components/NavBarComponent.html":{}}}],["navbarconfig().buttonsnavbarstart",{"_index":873,"title":{},"body":{"components/NavBarComponent.html":{}}}],["navigate",{"_index":1042,"title":{},"body":{"index.html":{}}}],["navigating",{"_index":431,"title":{},"body":{"components/CityComponent.html":{}}}],["navigation",{"_index":447,"title":{},"body":{"components/CityComponent.html":{},"components/NavBarComponent.html":{}}}],["navigationend",{"_index":438,"title":{},"body":{"components/CityComponent.html":{}}}],["necessary",{"_index":489,"title":{},"body":{"components/DashboardComponent.html":{}}}],["need",{"_index":1069,"title":{},"body":{"index.html":{}}}],["needs",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":158,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":366,"title":{},"body":{"components/CitiesComponent.html":{}}}],["ng",{"_index":1039,"title":{},"body":{"index.html":{}}}],["ngondestroy",{"_index":320,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["ngoninit",{"_index":321,"title":{},"body":{"components/CitiesComponent.html":{},"components/FormComponent.html":{}}}],["ngrx/effects",{"_index":586,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{},"dependencies.html":{}}}],["ngrx/store",{"_index":606,"title":{},"body":{"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"dependencies.html":{}}}],["none",{"_index":504,"title":{},"body":{"components/DashboardComponent.html":{}}}],["npm",{"_index":1086,"title":{},"body":{"index.html":{}}}],["number",{"_index":275,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":259,"title":{},"body":{"components/CardComponent.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"interfaces/DashboardState.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["object.keys(city).length",{"_index":419,"title":{},"body":{"components/CityComponent.html":{}}}],["observable",{"_index":426,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserFacade.html":{}}}],["observables",{"_index":404,"title":{},"body":{"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["of(mockresponse",{"_index":862,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["offset",{"_index":282,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["oftype",{"_index":585,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["oftype(cities",{"_index":580,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["oftype(getcity",{"_index":571,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["oftype(login",{"_index":908,"title":{},"body":{"injectables/UserEffects.html":{}}}],["oftype(logout",{"_index":914,"title":{},"body":{"injectables/UserEffects.html":{}}}],["oftype(register",{"_index":918,"title":{},"body":{"injectables/UserEffects.html":{}}}],["on(citiessuccess",{"_index":678,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["on(getcitysuccess",{"_index":680,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["on(loginsuccess",{"_index":953,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["on(logoutsuccess",{"_index":957,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["on(registersuccess",{"_index":956,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["on(resetcity",{"_index":682,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["onclickbutton",{"_index":486,"title":{},"body":{"components/DashboardComponent.html":{},"components/NavBarComponent.html":{}}}],["onclickbutton(button",{"_index":496,"title":{},"body":{"components/DashboardComponent.html":{}}}],["ondestroy",{"_index":306,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["one",{"_index":797,"title":{},"body":{"components/LoginComponent.html":{},"miscellaneous/typealiases.html":{}}}],["oninit",{"_index":305,"title":{},"body":{"components/CitiesComponent.html":{},"components/FormComponent.html":{}}}],["onsubmit",{"_index":713,"title":{},"body":{"components/FormComponent.html":{}}}],["onsubmitform",{"_index":710,"title":{},"body":{"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["onsubmitform(formoutputmodel",{"_index":787,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["open",{"_index":1080,"title":{},"body":{"index.html":{}}}],["operation",{"_index":850,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["operations",{"_index":515,"title":{},"body":{"components/DashboardComponent.html":{}}}],["optional",{"_index":156,"title":{},"body":{"injectables/AlertPopupService.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["options",{"_index":263,"title":{},"body":{"interfaces/CardConfig.html":{}}}],["order",{"_index":222,"title":{},"body":{"components/BarChartComponent.html":{}}}],["orlando",{"_index":651,"title":{},"body":{"injectables/DashboardService.html":{}}}],["otherwise",{"_index":824,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["out",{"_index":502,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["outline",{"_index":249,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"miscellaneous/typealiases.html":{}}}],["output",{"_index":740,"title":{},"body":{"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{}}}],["outputs",{"_index":715,"title":{},"body":{"components/FormComponent.html":{},"components/NavBarComponent.html":{}}}],["overview",{"_index":1078,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":1095,"title":{},"body":{"index.html":{}}}],["package",{"_index":1012,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":902,"title":{},"body":{"injectables/UserEffects.html":{},"index.html":{}}}],["param",{"_index":168,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["parameters",{"_index":155,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["password",{"_index":702,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"miscellaneous/typealiases.html":{}}}],["passwords",{"_index":757,"title":{},"body":{"components/FormComponent.html":{}}}],["path",{"_index":378,"title":{},"body":{"components/CitiesComponent.html":{},"miscellaneous/variables.html":{}}}],["paths",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pattern",{"_index":361,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{}}}],["payload",{"_index":278,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["perform",{"_index":488,"title":{},"body":{"components/DashboardComponent.html":{}}}],["performs",{"_index":849,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["pipe",{"_index":416,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{}}}],["pipe(filter(boolean",{"_index":343,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{}}}],["platform",{"_index":1066,"title":{},"body":{"index.html":{}}}],["popup",{"_index":15,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{},"miscellaneous/typealiases.html":{}}}],["popup'},{'name",{"_index":90,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["popup.component",{"_index":205,"title":{},"body":{"components/AppComponent.html":{}}}],["popup.component.html",{"_index":22,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.scss",{"_index":24,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts",{"_index":11,"title":{},"body":{"components/AlertPopupComponent.html":{},"coverage.html":{}}}],["popup.component.ts:19",{"_index":59,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts:24",{"_index":66,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts:29",{"_index":43,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts:35",{"_index":37,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts:49",{"_index":45,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.model",{"_index":73,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{}}}],["popup.model.ts",{"_index":124,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["popup.service",{"_index":75,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{}}}],["popup.service.ts",{"_index":146,"title":{},"body":{"injectables/AlertPopupService.html":{},"coverage.html":{}}}],["popup.service.ts:12",{"_index":162,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["popup.service.ts:17",{"_index":159,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["popup.service.ts:24",{"_index":152,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["popup.service.ts:34",{"_index":149,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["popup/alert",{"_index":10,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"coverage.html":{}}}],["popups",{"_index":56,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{}}}],["port",{"_index":1098,"title":{},"body":{"index.html":{}}}],["possible",{"_index":133,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"miscellaneous/typealiases.html":{}}}],["powered",{"_index":799,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["primary",{"_index":136,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"miscellaneous/typealiases.html":{}}}],["private",{"_index":30,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/UserEffects.html":{}}}],["process",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":1030,"title":{},"body":{"index.html":{}}}],["properties",{"_index":26,"title":{"properties.html":{}},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"properties.html":{}}}],["property",{"_index":352,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["props",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protected",{"_index":708,"title":{},"body":{"components/FormComponent.html":{}}}],["provided",{"_index":326,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/UserFacade.html":{}}}],["providedin",{"_index":166,"title":{},"body":{"injectables/AlertPopupService.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserFacade.html":{}}}],["provideeffects([usereffects",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestore",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestoredevtools",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":317,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["px",{"_index":730,"title":{},"body":{"components/FormComponent.html":{}}}],["rainfall",{"_index":301,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["rating",{"_index":116,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["rating.component",{"_index":457,"title":{},"body":{"components/CityComponent.html":{}}}],["rating.component.html",{"_index":892,"title":{},"body":{"components/StarRatingComponent.html":{}}}],["rating.component.scss",{"_index":893,"title":{},"body":{"components/StarRatingComponent.html":{}}}],["rating.component.ts",{"_index":891,"title":{},"body":{"components/StarRatingComponent.html":{},"coverage.html":{}}}],["rating.component.ts:17",{"_index":894,"title":{},"body":{"components/StarRatingComponent.html":{}}}],["rating/star",{"_index":456,"title":{},"body":{"components/CityComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["reactive",{"_index":533,"title":{},"body":{"components/DashboardComponent.html":{}}}],["reactiveformsmodule",{"_index":178,"title":{},"body":{"components/AppComponent.html":{},"components/FormComponent.html":{},"miscellaneous/variables.html":{}}}],["real",{"_index":636,"title":{},"body":{"injectables/DashboardService.html":{}}}],["received",{"_index":836,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{}}}],["receiving",{"_index":348,"title":{},"body":{"components/CitiesComponent.html":{}}}],["redirect",{"_index":825,"title":{},"body":{"injectables/LoginGuard.html":{},"injectables/UserEffects.html":{}}}],["reducer",{"_index":671,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["redux",{"_index":950,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["reference",{"_index":1079,"title":{},"body":{"index.html":{}}}],["register",{"_index":692,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["register(payload",{"_index":939,"title":{},"body":{"injectables/UserFacade.html":{}}}],["register(registerpayload",{"_index":851,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["registered",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registering",{"_index":843,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"miscellaneous/variables.html":{}}}],["registerpayload",{"_index":840,"title":{"interfaces/RegisterPayload.html":{}},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserFacade.html":{},"coverage.html":{}}}],["registerpayload.email.replace",{"_index":864,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["registerresponse",{"_index":844,"title":{"interfaces/RegisterResponse.html":{}},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"coverage.html":{}}}],["registers",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registersuccess",{"_index":920,"title":{},"body":{"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registration",{"_index":839,"title":{},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["registration'},{'name",{"_index":113,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["registration.component.html",{"_index":878,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["registration.component.scss",{"_index":879,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["registrationcomponent",{"_index":112,"title":{"components/RegistrationComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["related",{"_index":353,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{}}}],["releasing",{"_index":494,"title":{},"body":{"components/DashboardComponent.html":{}}}],["reload",{"_index":1045,"title":{},"body":{"index.html":{}}}],["remove",{"_index":630,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/UserEffects.html":{}}}],["removeuserdataredirect",{"_index":898,"title":{},"body":{"injectables/UserEffects.html":{}}}],["representing",{"_index":428,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/UserFacade.html":{}}}],["represents",{"_index":125,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":41,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{}}}],["reset",{"_index":251,"title":{},"body":{"interfaces/ButtonConfig.html":{},"injectables/DashboardFacade.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resetcity",{"_index":591,"title":{},"body":{"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resets",{"_index":46,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/CityComponent.html":{},"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["resettimer",{"_index":33,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["resources",{"_index":495,"title":{},"body":{"components/DashboardComponent.html":{}}}],["response",{"_index":283,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["response.name",{"_index":955,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["response.token",{"_index":954,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["responsible",{"_index":396,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{}}}],["results",{"_index":119,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retrieve",{"_index":623,"title":{},"body":{"injectables/DashboardService.html":{}}}],["retrieved",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retrieves",{"_index":424,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":418,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{}}}],["returned",{"_index":842,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{}}}],["returns",{"_index":48,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["returntype",{"_index":63,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["reverse",{"_index":221,"title":{},"body":{"components/BarChartComponent.html":{}}}],["root",{"_index":167,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserFacade.html":{},"index.html":{}}}],["root'},{'name",{"_index":92,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["route",{"_index":318,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route.dashboard",{"_index":910,"title":{},"body":{"injectables/UserEffects.html":{}}}],["route.login",{"_index":884,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["route.register",{"_index":798,"title":{},"body":{"components/LoginComponent.html":{}}}],["router",{"_index":400,"title":{},"body":{"components/CityComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{}}}],["routerlink",{"_index":179,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/variables.html":{}}}],["routeroutlet",{"_index":176,"title":{},"body":{"components/AppComponent.html":{}}}],["routersubscirption",{"_index":401,"title":{},"body":{"components/CityComponent.html":{}}}],["routes",{"_index":433,"title":{},"body":{"components/CityComponent.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":1038,"title":{},"body":{"index.html":{}}}],["running",{"_index":1058,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":165,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"dependencies.html":{}}}],["s",{"_index":1093,"title":{},"body":{"index.html":{}}}],["safetyindex",{"_index":290,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["san",{"_index":642,"title":{},"body":{"injectables/DashboardService.html":{}}}],["scaffolding",{"_index":1049,"title":{},"body":{"index.html":{}}}],["script",{"_index":1089,"title":{},"body":{"index.html":{}}}],["search",{"_index":327,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["searchcity",{"_index":328,"title":{},"body":{"components/CitiesComponent.html":{}}}],["searchformvaluechanges",{"_index":711,"title":{},"body":{"components/FormComponent.html":{}}}],["searchvaluechanges",{"_index":712,"title":{},"body":{"components/FormComponent.html":{}}}],["seattle",{"_index":653,"title":{},"body":{"injectables/DashboardService.html":{}}}],["secondary",{"_index":137,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["selects",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":1040,"title":{},"body":{"index.html":{}}}],["server",{"_index":1037,"title":{},"body":{"index.html":{}}}],["server/sr.frontend.challenge.yml",{"_index":1094,"title":{},"body":{"index.html":{}}}],["service",{"_index":54,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{}}}],["services/alert",{"_index":74,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/FormComponent.html":{}}}],["services/loginregisterservice.service",{"_index":811,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["set",{"_index":905,"title":{},"body":{"injectables/UserEffects.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sets",{"_index":39,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/CityComponent.html":{}}}],["settimeout",{"_index":64,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["setting",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setuserdata",{"_index":987,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setuserdataredirect",{"_index":899,"title":{},"body":{"injectables/UserEffects.html":{}}}],["setuserdataredirect(userdata",{"_index":903,"title":{},"body":{"injectables/UserEffects.html":{}}}],["setuserdatasuccess",{"_index":988,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["shared/components/alert",{"_index":204,"title":{},"body":{"components/AppComponent.html":{}}}],["shared/models/alert",{"_index":206,"title":{},"body":{"components/AppComponent.html":{}}}],["shared/services/alert",{"_index":207,"title":{},"body":{"components/AppComponent.html":{}}}],["show",{"_index":148,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{}}}],["show(alertpopupconfig",{"_index":151,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["shows",{"_index":153,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["sign",{"_index":790,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["signal",{"_index":183,"title":{},"body":{"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["signal(false",{"_index":193,"title":{},"body":{"components/AppComponent.html":{}}}],["signin",{"_index":793,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup",{"_index":882,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["single",{"_index":679,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["skip",{"_index":628,"title":{},"body":{"injectables/DashboardService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"index.html":{}}}],["space",{"_index":297,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["spaces",{"_index":471,"title":{},"body":{"components/CityComponent.html":{}}}],["specific",{"_index":601,"title":{},"body":{"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{}}}],["specified",{"_index":154,"title":{},"body":{"injectables/AlertPopupService.html":{},"injectables/UserEffects.html":{}}}],["specifies",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["speed",{"_index":293,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["src/.../alert",{"_index":1108,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../button.model.ts",{"_index":1109,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../card.model.ts",{"_index":1110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../cities.component.ts",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../city.component.ts",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dashboard.actions.ts",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dashboard.component.ts",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dashboard.reducer.ts",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dashboard.selectors.ts",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoints.ts",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../form.component.ts",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../form.model.ts",{"_index":1111,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../images.ts",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../navbar.component.ts",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../route.ts",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.actions.ts",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.reducer.ts",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.selectors.ts",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":174,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:32",{"_index":200,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:37",{"_index":185,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:42",{"_index":184,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:47",{"_index":194,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:52",{"_index":192,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":963,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/constants/endpoints.ts",{"_index":967,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/constants/images",{"_index":539,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/constants/images.ts",{"_index":969,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/constants/route",{"_index":380,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["src/app/constants/route.ts",{"_index":970,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/components/cities/cities.component.ts",{"_index":302,"title":{},"body":{"components/CitiesComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/components/cities/cities.component.ts:100",{"_index":360,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:105",{"_index":347,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:114",{"_index":334,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:121",{"_index":329,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:129",{"_index":323,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:39",{"_index":340,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:44",{"_index":351,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:49",{"_index":358,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:54",{"_index":356,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:63",{"_index":373,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:79",{"_index":339,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:90",{"_index":376,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:95",{"_index":362,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/models/dashboard.model",{"_index":452,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/core/models/dashboard.model.ts",{"_index":271,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["src/app/core/models/user.model.ts",{"_index":834,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["src/app/core/store/dashboard/dashboard.actions.ts",{"_index":980,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts",{"_index":555,"title":{},"body":{"injectables/DashboardEffects.html":{},"coverage.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts:16",{"_index":562,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts:21",{"_index":566,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts:27",{"_index":584,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts:46",{"_index":577,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["src/app/core/store/dashboard/dashboard.facade",{"_index":453,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts",{"_index":589,"title":{},"body":{"injectables/DashboardFacade.html":{},"coverage.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:17",{"_index":604,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:22",{"_index":594,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:30",{"_index":596,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:38",{"_index":600,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:45",{"_index":602,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.reducer.ts",{"_index":665,"title":{},"body":{"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/dashboard/dashboard.selectors.ts",{"_index":984,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/user/user.actions.ts",{"_index":986,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/user/user.effects.ts",{"_index":897,"title":{},"body":{"injectables/UserEffects.html":{},"coverage.html":{}}}],["src/app/core/store/user/user.effects.ts:20",{"_index":907,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:21",{"_index":900,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:33",{"_index":904,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:42",{"_index":901,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:51",{"_index":913,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:69",{"_index":921,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:87",{"_index":917,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.facade.ts",{"_index":934,"title":{},"body":{"injectables/UserFacade.html":{},"coverage.html":{}}}],["src/app/core/store/user/user.facade.ts:14",{"_index":943,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.facade.ts:19",{"_index":935,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.facade.ts:27",{"_index":937,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.facade.ts:35",{"_index":940,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.facade.ts:42",{"_index":938,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.reducer.ts",{"_index":949,"title":{},"body":{"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/user/user.selectors.ts",{"_index":993,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/guards/login.guard.ts",{"_index":816,"title":{},"body":{"injectables/LoginGuard.html":{},"coverage.html":{}}}],["src/app/guards/login.guard.ts:11",{"_index":819,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["src/app/guards/login.guard.ts:18",{"_index":820,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["src/app/modules/components/city/city.component.ts",{"_index":395,"title":{},"body":{"components/CityComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/modules/components/city/city.component.ts:100",{"_index":423,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:116",{"_index":402,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:33",{"_index":430,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:38",{"_index":410,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:43",{"_index":409,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:48",{"_index":427,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:53",{"_index":406,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:63",{"_index":408,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:70",{"_index":411,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:76",{"_index":412,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:83",{"_index":445,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts",{"_index":476,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:105",{"_index":526,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:115",{"_index":497,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:136",{"_index":487,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:37",{"_index":535,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:42",{"_index":528,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:47",{"_index":518,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:52",{"_index":537,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:58",{"_index":513,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:64",{"_index":532,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:74",{"_index":508,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:94",{"_index":506,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/login/login.component.ts",{"_index":783,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/modules/components/login/login.component.ts:26",{"_index":801,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/login/login.component.ts:67",{"_index":808,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/login/login.component.ts:68",{"_index":803,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/login/login.component.ts:74",{"_index":807,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/login/login.component.ts:84",{"_index":788,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/registration/registration.component.ts",{"_index":877,"title":{},"body":{"components/RegistrationComponent.html":{},"coverage.html":{}}}],["src/app/modules/components/registration/registration.component.ts:24",{"_index":885,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["src/app/modules/components/registration/registration.component.ts:84",{"_index":886,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["src/app/modules/components/registration/registration.component.ts:85",{"_index":887,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["src/app/modules/components/registration/registration.component.ts:91",{"_index":880,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["src/app/modules/services/dashboard.service.ts",{"_index":612,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{}}}],["src/app/modules/services/dashboard.service.ts:18",{"_index":619,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/modules/services/dashboard.service.ts:39",{"_index":621,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/modules/services/dashboard.service.ts:9",{"_index":616,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/modules/services/loginregisterservice.service.ts",{"_index":845,"title":{},"body":{"injectables/LoginRegisterService.html":{},"coverage.html":{}}}],["src/app/modules/services/loginregisterservice.service.ts:14",{"_index":846,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["src/app/modules/services/loginregisterservice.service.ts:22",{"_index":848,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["src/app/modules/services/loginregisterservice.service.ts:37",{"_index":852,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["src/app/shared/components/alert",{"_index":9,"title":{},"body":{"components/AlertPopupComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/bar",{"_index":211,"title":{},"body":{"components/BarChartComponent.html":{},"components/CityComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/button/button.component",{"_index":381,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["src/app/shared/components/button/button.component.ts",{"_index":230,"title":{},"body":{"components/ButtonComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/button/button.component.ts:22",{"_index":236,"title":{},"body":{"components/ButtonComponent.html":{}}}],["src/app/shared/components/button/button.component.ts:27",{"_index":237,"title":{},"body":{"components/ButtonComponent.html":{}}}],["src/app/shared/components/card/card.component",{"_index":382,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["src/app/shared/components/card/card.component.ts",{"_index":252,"title":{},"body":{"components/CardComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/card/card.component.ts:18",{"_index":257,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/shared/components/form/form.component",{"_index":383,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["src/app/shared/components/form/form.component.ts",{"_index":704,"title":{},"body":{"components/FormComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/components/form/form.component.ts:120",{"_index":727,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:42",{"_index":734,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:47",{"_index":732,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:55",{"_index":716,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:61",{"_index":717,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:66",{"_index":720,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:69",{"_index":736,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:70",{"_index":729,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:76",{"_index":739,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:80",{"_index":722,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:92",{"_index":723,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/navbar/navbar.component",{"_index":540,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/shared/components/navbar/navbar.component.ts",{"_index":865,"title":{},"body":{"components/NavBarComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/components/navbar/navbar.component.ts:27",{"_index":868,"title":{},"body":{"components/NavBarComponent.html":{}}}],["src/app/shared/components/navbar/navbar.component.ts:32",{"_index":869,"title":{},"body":{"components/NavBarComponent.html":{}}}],["src/app/shared/components/star",{"_index":455,"title":{},"body":{"components/CityComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["src/app/shared/models/alert",{"_index":123,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/models/button.model",{"_index":384,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["src/app/shared/models/button.model.ts",{"_index":241,"title":{},"body":{"interfaces/ButtonConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/models/card.model",{"_index":458,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/shared/models/card.model.ts",{"_index":262,"title":{},"body":{"interfaces/CardConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/models/form.model",{"_index":385,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["src/app/shared/models/form.model.ts",{"_index":684,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/models/form.model.ts:4",{"_index":782,"title":{},"body":{"interfaces/FormOutputModel.html":{}}}],["src/app/shared/models/navbar.model",{"_index":541,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/shared/models/navbar.model.ts",{"_index":876,"title":{},"body":{"interfaces/NavbarConfig.html":{},"coverage.html":{}}}],["src/app/shared/services/alert",{"_index":145,"title":{},"body":{"injectables/AlertPopupService.html":{},"coverage.html":{}}}],["src/environments/environment.prod.ts",{"_index":1008,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1009,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":19,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["star",{"_index":115,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["starratingcomponent",{"_index":114,"title":{"components/StarRatingComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1088,"title":{},"body":{"index.html":{}}}],["started",{"_index":1028,"title":{"index.html":{}},"body":{}}],["state",{"_index":534,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":593,"title":{},"body":{"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["store/dashboard/dashboard.facade",{"_index":388,"title":{},"body":{"components/CitiesComponent.html":{}}}],["stored",{"_index":1055,"title":{},"body":{"index.html":{}}}],["storing",{"_index":341,"title":{},"body":{"components/CitiesComponent.html":{}}}],["stream",{"_index":563,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{}}}],["string",{"_index":58,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"components/AppComponent.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":23,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["subject",{"_index":157,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["submission",{"_index":724,"title":{},"body":{"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["submit",{"_index":250,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"miscellaneous/typealiases.html":{}}}],["submitted",{"_index":719,"title":{},"body":{"components/FormComponent.html":{}}}],["subscribe((alertpopupconfig",{"_index":189,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribe((cities",{"_index":345,"title":{},"body":{"components/CitiesComponent.html":{}}}],["subscribe((city",{"_index":421,"title":{},"body":{"components/CityComponent.html":{}}}],["subscribe((event",{"_index":441,"title":{},"body":{"components/CityComponent.html":{}}}],["subscribe((token",{"_index":805,"title":{},"body":{"components/LoginComponent.html":{}}}],["subscribes",{"_index":425,"title":{},"body":{"components/CityComponent.html":{},"components/FormComponent.html":{}}}],["subscription",{"_index":186,"title":{},"body":{"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["success",{"_index":138,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/AppComponent.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["successful",{"_index":837,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":492,"title":{},"body":{"components/DashboardComponent.html":{}}}],["surname",{"_index":841,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/UserData.html":{}}}],["switch",{"_index":545,"title":{},"body":{"components/DashboardComponent.html":{}}}],["switchmap",{"_index":572,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["table",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":460,"title":{},"body":{"components/CityComponent.html":{}}}],["take(1",{"_index":420,"title":{},"body":{"components/CityComponent.html":{}}}],["takeuntil",{"_index":386,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["takeuntil(this.destroy",{"_index":344,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["temperature",{"_index":465,"title":{},"body":{"components/CityComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["test",{"_index":209,"title":{},"body":{"components/AppComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["testing",{"_index":1072,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1060,"title":{},"body":{"index.html":{}}}],["text",{"_index":267,"title":{},"body":{"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{}}}],["this.action$.pipe",{"_index":570,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["this.alertpopupconfig.set(alertpopupconfig",{"_index":190,"title":{},"body":{"components/AppComponent.html":{}}}],["this.alertpopupservice.alertpopupsubject.pipe",{"_index":187,"title":{},"body":{"components/AppComponent.html":{}}}],["this.alertpopupservice.show",{"_index":756,"title":{},"body":{"components/FormComponent.html":{}}}],["this.alertpopupsubject.next",{"_index":169,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["this.buttonlogoutconfig",{"_index":525,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.buttonsnavbar",{"_index":523,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.cities().cities",{"_index":350,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.cities.set(cities",{"_index":346,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.citieslist().filter((city",{"_index":354,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.city.set(city",{"_index":422,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityfiltername.set(searchcity",{"_index":390,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.cityid.set(event.split('/city/').filter((element",{"_index":442,"title":{},"body":{"components/CityComponent.html":{}}}],["this.customclass",{"_index":80,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["this.dashboardfacade.cities",{"_index":342,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.dashboardfacade.getcity",{"_index":415,"title":{},"body":{"components/CityComponent.html":{}}}],["this.dashboardfacade.getcity(this.cityid",{"_index":444,"title":{},"body":{"components/CityComponent.html":{}}}],["this.dashboardfacade.resetcity",{"_index":461,"title":{},"body":{"components/CityComponent.html":{}}}],["this.dashboardservice",{"_index":573,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["this.destroy$.next",{"_index":389,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["this.form.addcontrol",{"_index":746,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.patchvalue(value",{"_index":765,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.reset",{"_index":764,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.valid",{"_index":750,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.value.password",{"_index":752,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.value['confirm",{"_index":753,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.valuechanges.subscribe((value",{"_index":737,"title":{},"body":{"components/FormComponent.html":{}}}],["this.formbuilder.control",{"_index":748,"title":{},"body":{"components/FormComponent.html":{}}}],["this.formmodel().type",{"_index":751,"title":{},"body":{"components/FormComponent.html":{}}}],["this.formmodel()?.inputelements.foreach((input",{"_index":745,"title":{},"body":{"components/FormComponent.html":{}}}],["this.hide",{"_index":170,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["this.http.get(`${environment.baseurl}/${endpoints.cities}/${cityid",{"_index":663,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.http.get(`${environment.baseurl}/${endpoints.cities}?limit=${limit}&offset=${offset",{"_index":656,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.http.post(`${environment.baseurl}/${endpoints.login",{"_index":859,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["this.http.post(`${environment.baseurl}/${endpoints.register",{"_index":863,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["this.isvisible.set(alertpopupconfig.isvisible",{"_index":191,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loginregisterservice.login(payload).pipe",{"_index":909,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.loginregisterservice.register(payload).pipe",{"_index":919,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.onsubmitform.emit(this.form.value",{"_index":759,"title":{},"body":{"components/FormComponent.html":{}}}],["this.removeuserdataredirect",{"_index":915,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.router.events",{"_index":434,"title":{},"body":{"components/CityComponent.html":{}}}],["this.router.navigate([route.login",{"_index":832,"title":{},"body":{"injectables/LoginGuard.html":{},"injectables/UserEffects.html":{}}}],["this.router.navigate([userdata.router",{"_index":931,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.searchvaluechanges.emit(object.values(value)[0",{"_index":738,"title":{},"body":{"components/FormComponent.html":{}}}],["this.setuserdataredirect",{"_index":911,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.store.dispatch(cities",{"_index":609,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.dispatch(getcity",{"_index":610,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.dispatch(login",{"_index":946,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.store.dispatch(logout",{"_index":948,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.store.dispatch(register",{"_index":947,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.store.dispatch(resetcity",{"_index":611,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.select(cities",{"_index":603,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.select(getcity",{"_index":605,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.select(token",{"_index":941,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.store.select(userstate",{"_index":942,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.timer",{"_index":79,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["this.token$.unsubscribe",{"_index":552,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.user().name",{"_index":516,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.user().token",{"_index":527,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.user.set(user",{"_index":531,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.userfacade.login",{"_index":812,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userfacade.logout",{"_index":550,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.userfacade.register",{"_index":888,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["this.userfacade.token",{"_index":804,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userfacade.userstate$.subscribe",{"_index":529,"title":{},"body":{"components/DashboardComponent.html":{}}}],["through",{"_index":548,"title":{},"body":{"components/DashboardComponent.html":{}}}],["timer",{"_index":31,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["title",{"_index":182,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["titleformmodel",{"_index":695,"title":{"interfaces/TitleFormModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["token",{"_index":483,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["track",{"_index":392,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["true",{"_index":20,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":57,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1106,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typebuttontype",{"_index":244,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["typeformmodel",{"_index":691,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{}}}],["types",{"_index":1112,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uncomment",{"_index":632,"title":{},"body":{"injectables/DashboardService.html":{}}}],["undefined",{"_index":831,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["unit",{"_index":1059,"title":{},"body":{"index.html":{}}}],["unsubscribe",{"_index":514,"title":{},"body":{"components/DashboardComponent.html":{}}}],["unsubscribes",{"_index":403,"title":{},"body":{"components/CityComponent.html":{}}}],["unsubscribing",{"_index":493,"title":{},"body":{"components/DashboardComponent.html":{}}}],["up",{"_index":883,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["updated",{"_index":677,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["updateformvalue",{"_index":714,"title":{},"body":{"components/FormComponent.html":{}}}],["updateformvalue(value",{"_index":725,"title":{},"body":{"components/FormComponent.html":{}}}],["updates",{"_index":675,"title":{},"body":{"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["upload",{"_index":295,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["url",{"_index":450,"title":{},"body":{"components/CityComponent.html":{},"miscellaneous/variables.html":{}}}],["usa",{"_index":639,"title":{},"body":{"injectables/DashboardService.html":{}}}],["use",{"_index":1051,"title":{},"body":{"index.html":{}}}],["used",{"_index":47,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":484,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":519,"title":{},"body":{"components/DashboardComponent.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["user.actions",{"_index":925,"title":{},"body":{"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{}}}],["user.reducer",{"_index":945,"title":{},"body":{"injectables/UserFacade.html":{}}}],["user.selectors",{"_index":944,"title":{},"body":{"injectables/UserFacade.html":{}}}],["userdata",{"_index":835,"title":{"interfaces/UserData.html":{}},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"coverage.html":{}}}],["userdata.name",{"_index":930,"title":{},"body":{"injectables/UserEffects.html":{}}}],["userdata.token",{"_index":928,"title":{},"body":{"injectables/UserEffects.html":{}}}],["usereffects",{"_index":896,"title":{"injectables/UserEffects.html":{}},"body":{"injectables/UserEffects.html":{},"coverage.html":{}}}],["userfacade",{"_index":485,"title":{"injectables/UserFacade.html":{}},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserFacade.html":{},"coverage.html":{}}}],["userfeaturekey",{"_index":951,"title":{},"body":{"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userreducer",{"_index":952,"title":{},"body":{"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userstate",{"_index":530,"title":{"interfaces/UserState.html":{}},"body":{"components/DashboardComponent.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":451,"title":{},"body":{"components/CityComponent.html":{}}}],["v1",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validation",{"_index":760,"title":{},"body":{"components/FormComponent.html":{}}}],["validatorfn",{"_index":688,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{}}}],["validators",{"_index":379,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["validators.email",{"_index":791,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["validators.minlength(6",{"_index":792,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["validators.required",{"_index":370,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["value",{"_index":51,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":134,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"miscellaneous/typealiases.html":{}}}],["var",{"_index":87,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["variable",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":744,"title":{"miscellaneous/variables.html":{}},"body":{"components/FormComponent.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vegas",{"_index":649,"title":{},"body":{"injectables/DashboardService.html":{}}}],["version",{"_index":1034,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["versions",{"_index":968,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["versions.v1}/cities",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":1062,"title":{},"body":{"index.html":{}}}],["visibility",{"_index":164,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["visible",{"_index":197,"title":{},"body":{"components/AppComponent.html":{}}}],["void",{"_index":49,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["w",{"_index":337,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"index.html":{}}}],["want",{"_index":1102,"title":{},"body":{"index.html":{}}}],["warning",{"_index":140,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["weather",{"_index":464,"title":{},"body":{"components/CityComponent.html":{}}}],["welcome",{"_index":553,"title":{},"body":{"components/DashboardComponent.html":{}}}],["whatever",{"_index":1101,"title":{},"body":{"index.html":{}}}],["whether",{"_index":196,"title":{},"body":{"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["whit",{"_index":635,"title":{},"body":{"injectables/DashboardService.html":{}}}],["white",{"_index":505,"title":{},"body":{"components/DashboardComponent.html":{}}}],["withviewtransitions",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yanchware",{"_index":198,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["yanchware_logo",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yanchwarego",{"_index":1029,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["yanchwarego_logo",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yanchwarego_mini_logo",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":598,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["york",{"_index":638,"title":{},"body":{"injectables/DashboardService.html":{}}}],["zone.js",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AlertPopupComponent.html":{"url":"components/AlertPopupComponent.html","title":"component - AlertPopupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AlertPopupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/alert-popup/alert-popup.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying an alert popup.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-alert-popup\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./alert-popup.component.html\n            \n\n\n\n            \n                styleUrl\n                ./alert-popup.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupConfig\n                            \n                            \n                                alertPopupService\n                            \n                            \n                                customClass\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resetTimer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupConfig\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:35\n                            \n                        \n\n                \n                    \n                            Initializes the alert popup component and sets a timer to hide the popup.\n\n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alertPopupConfig\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:29\n                            \n                        \n                \n                    \n                        The configuration for the alert popup.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        resetTimer\n                        \n                    \n                \n            \n            \n                \nresetTimer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:49\n                        \n                    \n\n\n            \n                \n                        Resets the timer used to hide the alert popup.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupConfig\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:29\n                        \n                    \n\n            \n                \n                    The configuration for the alert popup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AlertPopupService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:35\n                        \n                    \n\n            \n                \n                    Inject service for managing alert popups.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:19\n                        \n                    \n\n            \n                \n                    The custom CSS class for the alert popup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        timer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                \n                    \n                        Default value : setTimeout(() => {}, 0)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:24\n                        \n                    \n\n            \n                \n                    The timer used to hide the alert popup after a certain duration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, input } from '@angular/core';\nimport { AlertPopupConfig, TIMER } from '../../models/alert-popup.model';\nimport { AlertPopupService } from '../../services/alert-popup.service';\n\n/**\n * Component for displaying an alert popup.\n */\n@Component({\n  selector: 'app-alert-popup',\n  standalone: true,\n  imports: [],\n  templateUrl: './alert-popup.component.html',\n  styleUrl: './alert-popup.component.scss',\n})\nexport class AlertPopupComponent {\n  /**\n   * The custom CSS class for the alert popup.\n   */\n  customClass: string = '';\n\n  /**\n   * The timer used to hide the alert popup after a certain duration.\n   */\n  private timer: ReturnType = setTimeout(() => {}, 0);\n\n  /**\n   * The configuration for the alert popup.\n   */\n  alertPopupConfig = input.required();\n\n\n  /**\n   * Inject service for managing alert popups.\n   */\n  alertPopupService = inject(AlertPopupService);\n\n  /**\n   * Initializes the alert popup component and sets a timer to hide the popup.\n   */\n  constructor() {\n    this.timer = setTimeout(() => {\n      this.customClass = 'hide';\n    }, TIMER);\n  }\n\n  /**\n   * Resets the timer used to hide the alert popup.\n   */\n  resetTimer() {\n    clearTimeout(this.timer);\n  }\n}\n\n    \n\n    \n        \n  \n    {{ alertPopupConfig().label }}\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ alertPopupConfig().label }}      '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AlertPopupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AlertPopupConfig.html":{"url":"interfaces/AlertPopupConfig.html","title":"interface - AlertPopupConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AlertPopupConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/alert-popup.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for an alert popup.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alertType\n                                        \n                                \n                                \n                                        \n                                            isVisible\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alertType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alertType:         AlertPopupType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AlertPopupType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isVisible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TIMER = 7000;\n\n/**\n * Represents the type of an alert popup.\n * Possible values include: 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'.\n */\nexport type AlertPopupType =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'info'\n  | 'light'\n  | 'dark';\n\n/**\n * Represents the configuration for an alert popup.\n */\nexport interface AlertPopupConfig {\n  alertType: AlertPopupType;\n  label: string;\n  isVisible: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AlertPopupService.html":{"url":"injectables/AlertPopupService.html","title":"injectable - AlertPopupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AlertPopupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/alert-popup.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupSubject\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hide\n                            \n                            \n                                show\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hide\n                        \n                    \n                \n            \n            \n                \nhide()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/alert-popup.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Hides the alert popup.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        show\n                        \n                    \n                \n            \n            \n                \nshow(alertPopupConfig: AlertPopupConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/alert-popup.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Shows the alert popup with the specified configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                alertPopupConfig\n                                            \n                                                            AlertPopupConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The configuration for the alert popup.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/alert-popup.service.ts:17\n                        \n                    \n\n            \n                \n                    Subject used to emit alert popup configurations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        timer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                \n                    \n                        Default value : setTimeout(() => {}, 0)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/alert-popup.service.ts:12\n                        \n                    \n\n            \n                \n                    Timer used to control the visibility of the alert popup.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { AlertPopupConfig, TIMER } from '../models/alert-popup.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertPopupService {\n  /**\n   * Timer used to control the visibility of the alert popup.\n   */\n  private timer: ReturnType = setTimeout(() => {}, 0);\n\n  /**\n   * Subject used to emit alert popup configurations.\n   */\n  alertPopupSubject: Subject =\n    new Subject();\n\n  /**\n   * Shows the alert popup with the specified configuration.\n   * @param alertPopupConfig The configuration for the alert popup.\n   */\n  show(alertPopupConfig: AlertPopupConfig) {\n    this.alertPopupSubject.next({ ...alertPopupConfig, isVisible: true });\n    this.timer = setTimeout(() => {\n      this.hide();\n    }, TIMER + 500);\n  }\n\n  /**\n   * Hides the alert popup.\n   */\n  hide() {\n    this.alertPopupSubject.next({\n      ...({} as AlertPopupConfig),\n      isVisible: false,\n    });\n    clearInterval(this.timer);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        The root component of the application.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                            CommonModule\n                            ReactiveFormsModule\n                            RouterLink\n                                AlertPopupComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupConfig\n                            \n                            \n                                alertPopupService\n                            \n                            \n                                alertPopupSubject$\n                            \n                            \n                                isVisible\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal({} as AlertPopupConfig)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:42\n                        \n                    \n\n            \n                \n                    The configuration for the alert popup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AlertPopupService)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:37\n                        \n                    \n\n            \n                \n                    Service for displaying alert popups.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.alertPopupService.alertPopupSubject.pipe(\n    filter(Boolean)\n  ).subscribe((alertPopupConfig: AlertPopupConfig) => {\n    this.alertPopupConfig.set(alertPopupConfig);\n    this.isVisible.set(alertPopupConfig.isVisible);\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:52\n                        \n                    \n\n            \n                \n                    Subscription for the alert popup subject.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:47\n                        \n                    \n\n            \n                \n                    Indicates whether the alert popup is visible or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'yanchware-go'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:32\n                        \n                    \n\n            \n                \n                    The title of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, inject, signal } from '@angular/core';\nimport {\n  ReactiveFormsModule\n} from '@angular/forms';\nimport { RouterLink, RouterOutlet } from '@angular/router';\nimport { AlertPopupComponent } from './shared/components/alert-popup/alert-popup.component';\nimport { AlertPopupConfig } from './shared/models/alert-popup.model';\nimport { AlertPopupService } from './shared/services/alert-popup.service';\nimport { Subscription, filter } from 'rxjs';\n\n/**\n * The root component of the application.\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    CommonModule,\n    ReactiveFormsModule,\n    RouterLink,\n    AlertPopupComponent,\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  /**\n   * The title of the application.\n   */\n  title = 'yanchware-go';\n\n  /**\n   * Service for displaying alert popups.\n   */\n  alertPopupService = inject(AlertPopupService);\n\n  /**\n   * The configuration for the alert popup.\n   */\n  alertPopupConfig = signal({} as AlertPopupConfig);\n\n  /**\n   * Indicates whether the alert popup is visible or not.\n   */\n  isVisible = signal(false);\n\n  /**\n   * Subscription for the alert popup subject.\n   */\n  alertPopupSubject$: Subscription = this.alertPopupService.alertPopupSubject.pipe(\n    filter(Boolean)\n  ).subscribe((alertPopupConfig: AlertPopupConfig) => {\n    this.alertPopupConfig.set(alertPopupConfig);\n    this.isVisible.set(alertPopupConfig.isVisible);\n  });\n}\n\n    \n\n    \n        SHOW ALERT TEST SUCCESS -->\n\n  \n\n  @if(isVisible()) {\n  \n  }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'SHOW ALERT TEST SUCCESS -->    @if(isVisible()) {    }'\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BarChartComponent.html":{"url":"components/BarChartComponent.html","title":"component - BarChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BarChartComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/bar-chart/bar-chart.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-bar-chart\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./bar-chart.component.html\n            \n\n\n\n            \n                styleUrl\n                ./bar-chart.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isReverse\n                            \n                            \n                                label\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isReverse\n                            \n                            \n                                label\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isReverse\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:30\n                            \n                        \n                \n                    \n                        signal that Determines whether the bar chart should be displayed in reverse order.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:19\n                            \n                        \n                \n                    \n                        signal label input for the bar chart component.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:25\n                            \n                        \n                \n                    \n                        signal input required value of the bar chart.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isReverse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:30\n                        \n                    \n\n            \n                \n                    signal that Determines whether the bar chart should be displayed in reverse order.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        label\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:19\n                        \n                    \n\n            \n                \n                    signal label input for the bar chart component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:25\n                        \n                    \n\n            \n                \n                    signal input required value of the bar chart.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\n@Component({\n  selector: 'app-bar-chart',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bar-chart.component.html',\n  styleUrl: './bar-chart.component.scss'\n})\n/**\n * Represents a bar chart component.\n */\nexport class BarChartComponent {\n\n  /**\n   * signal label input for the bar chart component.\n   */\n  label = input();\n\n\n  /**\n   * signal input required value of the bar chart.\n   */\n  value = input.required();\n    \n  /**\n   * signal that Determines whether the bar chart should be displayed in reverse order.\n   */\n  isReverse = input(false);\n\n}\n\n    \n\n    \n        \n  {{ label() }}\n  \n    @if (!isReverse()) {\n    = 70, 'bar__orange': (value() > 40 && value() \n       5}\">{{ value() }}\n    \n    } @else {\n    = 70, 'bar__orange': (value() > 40 && value() \n       5}\">{{ value() }}\n    \n    }\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{ label() }}      @if (!isReverse()) {    = 70, \\'bar__orange\\': (value() > 40 && value()        5}\">{{ value() }}        } @else {    = 70, \\'bar__orange\\': (value() > 40 && value()        5}\">{{ value() }}        }  '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BarChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ButtonComponent.html":{"url":"components/ButtonComponent.html","title":"component - ButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/button/button.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents a custom button component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-button\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./button.component.html\n            \n\n\n\n            \n                styleUrl\n                ./button.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonConfig\n                            \n                            \n                                isDisabled\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                buttonConfig\n                            \n                            \n                                isDisabled\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        buttonConfig\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/button/button.component.ts:22\n                            \n                        \n                \n                    \n                        The configuration for the button.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isDisabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/button/button.component.ts:27\n                            \n                        \n                \n                    \n                        Indicates whether the button is disabled.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buttonConfig\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/button/button.component.ts:22\n                        \n                    \n\n            \n                \n                    The configuration for the button.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/button/button.component.ts:27\n                        \n                    \n\n            \n                \n                    Indicates whether the button is disabled.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, input } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { ButtonConfig } from '../../models/button.model';\n\n/**\n * Represents a custom button component.\n */\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [\n    RouterLink\n  ],\n  templateUrl: './button.component.html',\n  styleUrl: './button.component.scss'\n})\nexport class ButtonComponent {\n\n  /**\n   * The configuration for the button.\n   */\n  buttonConfig = input.required();\n\n  /**\n   * Indicates whether the button is disabled.\n   */\n  isDisabled = input(false);\n}\n\n    \n\n    \n        {{ buttonConfig().label }}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ buttonConfig().label }}'\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ButtonConfig.html":{"url":"interfaces/ButtonConfig.html","title":"interface - ButtonConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ButtonConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/button.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for a button.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            classButtonType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            customClass\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isDisabled\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            routerLink\n                                        \n                                \n                                \n                                        \n                                            typeButtonType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        classButtonType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        classButtonType:         ButtonClassType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonClassType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isDisabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isDisabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routerLink\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        routerLink:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        typeButtonType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        typeButtonType:         ButtonType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type ButtonClassType =\n  | 'btn'\n  | 'btn-primary'\n  | 'btn-secondary'\n  | 'btn-success'\n  | 'btn-danger'\n  | 'btn-warning'\n  | 'btn-info'\n  | 'btn-light'\n  | 'btn-dark'\n  | 'btn-link'\n  | 'btn-outline-primary'\n  | 'btn-outline-secondary'\n  | 'btn-outline-success'\n  | 'btn-outline-danger'\n  | 'btn-outline-warning'\n  | 'btn-outline-info'\n  | 'btn-outline-light'\n  | 'btn-outline-dark';\n\n/**\n * Represents the type of a button.\n */\ntype ButtonType = 'button' | 'submit' | 'reset';\n\n/**\n * Represents the configuration for a button.\n */\nexport interface ButtonConfig {\n  id: string;\n  classButtonType: ButtonClassType;\n  typeButtonType: ButtonType;\n  label: string;\n  \n  customClass?: string;\n  isDisabled?: boolean;\n  routerLink?: string;\n  value?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardComponent.html":{"url":"components/CardComponent.html","title":"component - CardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/card/card.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents a card component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-card\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./card.component.html\n            \n\n\n\n            \n                styleUrl\n                ./card.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cardModel\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                cardModel\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        cardModel\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/card/card.component.ts:18\n                            \n                        \n                \n                    \n                        Input with card config object.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cardModel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/card/card.component.ts:18\n                        \n                    \n\n            \n                \n                    Input with card config object.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, input } from '@angular/core';\nimport { CardConfig } from '../../models/card.model';\n\n/**\n * Represents a card component.\n */\n@Component({\n  selector: 'app-card',\n  standalone: true,\n  imports: [],\n  templateUrl: './card.component.html',\n  styleUrl: './card.component.scss'\n})\nexport class CardComponent {\n  /**\n   * Input with card config object.\n   */\n  cardModel = input();\n}\n\n    \n\n    \n        \n  \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CardConfig.html":{"url":"interfaces/CardConfig.html","title":"interface - CardConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CardConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/card.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration options for a card.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cardBodyCustomClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cardCustomClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cardType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cardBodyCustomClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cardBodyCustomClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cardCustomClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cardCustomClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cardType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cardType:         CardType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CardType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type CardType =\n'text-bg-primary'\n| 'text-bg-secondary'\n| 'text-bg-success'\n| 'text-bg-danger'\n| 'text-bg-warning'\n| 'text-bg-info'\n| 'text-bg-light'\n| 'text-bg-dark'\n| 'border-primary'\n| 'border-secondary'\n| 'border-success'\n| 'border-danger'\n| 'border-warning'\n| 'border-info'\n| 'border-light'\n| 'border-dark';\n\n/**\n * Represents the configuration options for a card.\n */\nexport interface CardConfig {\n  cardCustomClass?: string;\n  cardType?: CardType;\n  cardBodyCustomClass?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cities.html":{"url":"interfaces/Cities.html","title":"interface - Cities","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cities\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a collection of cities.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cities\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cities:         City[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         City[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CitiesComponent.html":{"url":"components/CitiesComponent.html","title":"component - CitiesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CitiesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/core/components/cities/cities.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying a list of cities.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-cities\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                MODULES\n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./cities.component.html\n            \n\n\n\n            \n                styleUrl\n                ./cities.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonElement\n                            \n                            \n                                cities\n                            \n                            \n                                cities$\n                            \n                            \n                                citiesList\n                            \n                            \n                                citiesListFiltered\n                            \n                            \n                                cityFilterName\n                            \n                            \n                                dashboardFacade\n                            \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                formModel\n                            \n                            \n                                    Public\n                                ROUTE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterCities\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterCities\n                        \n                    \n                \n            \n            \n                \nfilterCities(searchCity: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/cities/cities.component.ts:129\n                        \n                    \n\n\n            \n                \n                        Filters the cities based on the provided search city name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                searchCity\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the city to filter.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/cities/cities.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when the component is about to be destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/cities/cities.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called after the component has been initialized.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buttonElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ButtonConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: 'explore',\n    classButtonType: 'btn-outline-primary',\n    typeButtonType: 'button',\n    label: 'Explore',\n    customClass: 'w-100',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:79\n                        \n                    \n\n            \n                \n                    Button configuration for the explore button.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cities\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal({} as Cities)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:39\n                        \n                    \n\n            \n                \n                    Signal for storing the cities data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cities$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.dashboardFacade.cities$\n    .pipe(filter(Boolean), takeUntil(this.destroy$))\n    .subscribe((cities: Cities) => {\n      this.cities.set(cities);\n    })\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:105\n                        \n                    \n\n            \n                \n                    Subscription for receiving cities data from the DashboardFacade.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        citiesList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => this.cities().cities)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:44\n                        \n                    \n\n            \n                \n                    Computed property related with cities signal => cities.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        citiesListFiltered\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() =>\n    this.citiesList().filter((city) =>\n      city.name.toLowerCase().includes(this.cityFilterName().toLowerCase())\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:54\n                        \n                    \n\n            \n                \n                    Computed property for getting the filtered list of cities based on the city filter name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cityFilterName\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:49\n                        \n                    \n\n            \n                \n                    Signal for storing the city filter name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dashboardFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DashboardFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:100\n                        \n                    \n\n            \n                \n                    Inject the DashboardFacade Pattern.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:95\n                        \n                    \n\n            \n                \n                    Subject for managing the component's lifecycle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormModel\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'search',\n    cardCustomClass: 'w-100',\n    inputElements: [\n      {\n        label: 'Choose your next destination',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'mb-3',\n      },\n    ],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:63\n                        \n                    \n\n            \n                \n                    Form model for the search input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ROUTE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ROUTE\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:90\n                        \n                    \n\n            \n                \n                    Constant for storing the route path.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  OnDestroy,\n  OnInit,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { ROUTE } from '@src/app/constants/route';\nimport { ButtonComponent } from '@src/app/shared/components/button/button.component';\nimport { CardComponent } from '@src/app/shared/components/card/card.component';\nimport { FormComponent } from '@src/app/shared/components/form/form.component';\nimport { ButtonConfig } from '@src/app/shared/models/button.model';\nimport { FormModel } from '@src/app/shared/models/form.model';\nimport { Subject, Subscription, filter, takeUntil } from 'rxjs';\nimport { Cities, City } from '../../models/dashboard.model';\nimport { DashboardFacade } from '../../store/dashboard/dashboard.facade';\n\nconst MODULES = [CommonModule, RouterLink];\nconst COMPONENTS = [FormComponent, CardComponent, ButtonComponent];\n\n/**\n * Component for displaying a list of cities.\n */\n@Component({\n  selector: 'app-cities',\n  standalone: true,\n  imports: [...MODULES, ...COMPONENTS],\n  templateUrl: './cities.component.html',\n  styleUrl: './cities.component.scss',\n})\nexport class CitiesComponent implements OnInit, OnDestroy {\n  /**\n   * Signal for storing the cities data.\n   */\n  cities = signal({} as Cities);\n\n  /**\n   * Computed property related with cities signal => cities.\n   */\n  citiesList = computed(() => this.cities().cities);\n\n  /**\n   * Signal for storing the city filter name.\n   */\n  cityFilterName = signal('');\n\n  /**\n   * Computed property for getting the filtered list of cities based on the city filter name.\n   */\n  citiesListFiltered = computed(() =>\n    this.citiesList().filter((city) =>\n      city.name.toLowerCase().includes(this.cityFilterName().toLowerCase())\n    )\n  );\n\n  /**\n   * Form model for the search input.\n   */\n  formModel: FormModel = {\n    type: 'search',\n    cardCustomClass: 'w-100',\n    inputElements: [\n      {\n        label: 'Choose your next destination',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'mb-3',\n      },\n    ],\n  };\n\n  /**\n   * Button configuration for the explore button.\n   */\n  buttonElement: ButtonConfig = {\n    id: 'explore',\n    classButtonType: 'btn-outline-primary',\n    typeButtonType: 'button',\n    label: 'Explore',\n    customClass: 'w-100',\n  };\n\n  /**\n   * Constant for storing the route path.\n   */\n  public ROUTE = ROUTE;\n\n  /**\n   * Subject for managing the component's lifecycle.\n   */\n  private destroy$ = new Subject();\n\n  /**\n   * Inject the DashboardFacade Pattern.\n   */\n  dashboardFacade = inject(DashboardFacade);\n\n  /**\n   * Subscription for receiving cities data from the DashboardFacade.\n   */\n  cities$: Subscription = this.dashboardFacade.cities$\n    .pipe(filter(Boolean), takeUntil(this.destroy$))\n    .subscribe((cities: Cities) => {\n      this.cities.set(cities);\n    });\n\n  /**\n   * Lifecycle hook that is called after the component has been initialized.\n   */\n  ngOnInit() {\n    this.dashboardFacade.cities();\n  }\n\n  /**\n   * Lifecycle hook that is called when the component is about to be destroyed.\n   */\n  ngOnDestroy() {\n    this.destroy$.next();\n  }\n\n  /**\n   * Filters the cities based on the provided search city name.\n   * @param searchCity The name of the city to filter.\n   */\n  filterCities(searchCity: string) {\n    this.cityFilterName.set(searchCity);\n  }\n}\n\n    \n\n    \n        \n  \n\n    \n      \n    \n  \n\n  @if (citiesListFiltered()) {\n   2, }\">\n    @for (city of citiesListFiltered(); track city) {\n    \n      \n        \n          \n        \n\n        \n          {{ city.name }}\n          {{ city.country }}\n        \n\n        \n      \n    \n    }\n  \n  }\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    @if (citiesListFiltered()) {   2, }\">    @for (city of citiesListFiltered(); track city) {                                                      {{ city.name }}          {{ city.country }}                              }    }'\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CitiesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/City.html":{"url":"interfaces/City.html","title":"interface - City","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  City\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a city.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cityId\n                                        \n                                \n                                \n                                        \n                                            country\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cityId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CityComponent.html":{"url":"components/CityComponent.html","title":"component - CityComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CityComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/components/city/city.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the CityComponent class.\nThis component is responsible for displaying city information.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-city\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                MODULES\n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./city.component.html\n            \n\n\n\n            \n                styleUrl\n                ./city.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonElement\n                            \n                            \n                                cardConfig\n                            \n                            \n                                city\n                            \n                            \n                                cityId\n                            \n                            \n                                dashboardFacade\n                            \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                getCity\n                            \n                            \n                                    Public\n                                ROUTE\n                            \n                            \n                                router\n                            \n                            \n                                routerSubscirption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/city/city.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when the component is destroyed.\nIt resets the city in the DashboardFacade and unsubscribes from observables.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buttonElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ButtonConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: 'back',\n    classButtonType: 'btn-outline-primary',\n    typeButtonType: 'button',\n    label: 'Go back to cities',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:53\n                        \n                    \n\n            \n                \n                    Configuration for the button element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cardConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CardConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    cardCustomClass: 'h-100'\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:63\n                        \n                    \n\n            \n                \n                    Configuration object for the card.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal({} as CityInfoResponse)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:43\n                        \n                    \n\n            \n                \n                    Represents the city information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cityId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:38\n                        \n                    \n\n            \n                \n                    The ID of the city.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dashboardFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DashboardFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:70\n                        \n                    \n\n            \n                \n                    Inject the DashboardFacade Pattern.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:76\n                        \n                    \n\n            \n                \n                    Subject used to signal the destruction of the component.\nIt emits a void value when the component is destroyed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCity\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.dashboardFacade.getCity$\n    .pipe(\n      filter((city) => {\n        return Object.keys(city).length > 0;\n      }),\n      take(1),\n      takeUntil(this.destroy$),\n      )\n    .subscribe((city: CityInfoResponse) => {\n      this.city.set(city);\n    })\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:100\n                        \n                    \n\n            \n                \n                    Subscription property that retrieves the city information.\nIt subscribes to the getCity$ observable and sets the city information\nto the city property of the component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ROUTE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ROUTE\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:48\n                        \n                    \n\n            \n                \n                    The constant representing the route for the city component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:33\n                        \n                    \n\n            \n                \n                    The router object for navigating between routes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        routerSubscirption\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.router.events\n    .pipe(\n      filter((event) => event instanceof NavigationEnd),\n      map((event) => event as NavigationEnd),\n      map((event) => event.urlAfterRedirects),\n      takeUntil(this.destroy$)\n    )\n    .subscribe((event: string) => {\n      this.cityId.set(event.split('/city/').filter((element) => element)[0]);\n      return this.dashboardFacade.getCity(this.cityId());\n    })\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:83\n                        \n                    \n\n            \n                \n                    Subscription for router events related to navigation.\nIt listens for NavigationEnd events, extracts the city ID from the URL,\nand retrieves the city data using the dashboardFacade.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, OnDestroy, inject, signal } from '@angular/core';\nimport { NavigationEnd, Router, RouterLink } from '@angular/router';\nimport { ROUTE } from '@src/app/constants/route';\nimport { CityInfoResponse } from '@src/app/core/models/dashboard.model';\nimport { DashboardFacade } from '@src/app/core/store/dashboard/dashboard.facade';\nimport { BarChartComponent } from '@src/app/shared/components/bar-chart/bar-chart.component';\nimport { ButtonComponent } from '@src/app/shared/components/button/button.component';\nimport { CardComponent } from '@src/app/shared/components/card/card.component';\nimport { StarRatingComponent } from '@src/app/shared/components/star-rating/star-rating.component';\nimport { ButtonConfig } from '@src/app/shared/models/button.model';\nimport { CardConfig } from '@src/app/shared/models/card.model';\nimport { Subject, Subscription, filter, map, take, takeUntil } from 'rxjs';\n\nconst MODULES = [CommonModule, RouterLink];\nconst COMPONENTS = [CardComponent, ButtonComponent, BarChartComponent, StarRatingComponent];\n\n/**\n * Represents the CityComponent class.\n * This component is responsible for displaying city information.\n */\n@Component({\n  selector: 'app-city',\n  standalone: true,\n  imports: [...MODULES, ...COMPONENTS],\n  templateUrl: './city.component.html',\n  styleUrl: './city.component.scss',\n})\nexport class CityComponent implements OnDestroy {\n  /**\n   * The router object for navigating between routes.\n   */\n  router = inject(Router);\n\n  /**\n   * The ID of the city.\n   */\n  cityId = signal('');\n\n  /**\n   * Represents the city information.\n   */\n  city = signal({} as CityInfoResponse);\n\n  /**\n   * The constant representing the route for the city component.\n   */\n  public ROUTE = ROUTE;\n\n  /**\n   * Configuration for the button element.\n   */\n  buttonElement: ButtonConfig = {\n    id: 'back',\n    classButtonType: 'btn-outline-primary',\n    typeButtonType: 'button',\n    label: 'Go back to cities',\n  };\n\n  /**\n   * Configuration object for the card.\n   */\n  cardConfig: CardConfig = {\n    cardCustomClass: 'h-100'\n  }\n\n  /**\n   * Inject the DashboardFacade Pattern.\n   */\n  dashboardFacade = inject(DashboardFacade);\n\n  /**\n   * Subject used to signal the destruction of the component.\n   * It emits a void value when the component is destroyed.\n   */\n  private destroy$ = new Subject();\n\n  /**\n   * Subscription for router events related to navigation.\n   * It listens for NavigationEnd events, extracts the city ID from the URL,\n   * and retrieves the city data using the dashboardFacade.\n   */\n  routerSubscirption: Subscription = this.router.events\n    .pipe(\n      filter((event) => event instanceof NavigationEnd),\n      map((event) => event as NavigationEnd),\n      map((event) => event.urlAfterRedirects),\n      takeUntil(this.destroy$)\n    )\n    .subscribe((event: string) => {\n      this.cityId.set(event.split('/city/').filter((element) => element)[0]);\n      return this.dashboardFacade.getCity(this.cityId());\n    });\n\n  /**\n   * Subscription property that retrieves the city information.\n   * It subscribes to the `getCity$` observable and sets the city information\n   * to the `city` property of the component.\n   */\n  getCity: Subscription = this.dashboardFacade.getCity$\n    .pipe(\n      filter((city) => {\n        return Object.keys(city).length > 0;\n      }),\n      take(1),\n      takeUntil(this.destroy$),\n      )\n    .subscribe((city: CityInfoResponse) => {\n      this.city.set(city);\n    });\n\n  /**\n   * Lifecycle hook that is called when the component is destroyed.\n   * It resets the city in the DashboardFacade and unsubscribes from observables.\n   */\n  ngOnDestroy() {\n    this.dashboardFacade.resetCity();\n    this.destroy$.next();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n      \n\n      @if (city()) {\n      \n        \n      \n      \n        {{ city().name }}\n        {{ city().country }}\n      \n\n      \n        \n      \n\n      \n        \n      \n\n      \n        Internet Speed\n        \n          \n        \n        \n          \n        \n      \n\n      \n        Weather Info\n        \n          \n            Temperature {{ city().climate.averageTemperature }}C°\n          \n          \n            Rainfall {{ city().climate.rainfall }}mm\n          \n        \n\n      \n\n      @if (city().coworkingSpaces) {\n      \n        \n          \n            \n              \n                Coworking Spaces Info\n              \n            \n            \n              \n                @for (coworkingSpace of city().coworkingSpaces; track coworkingSpace) {\n                \n\n                  \n                    {{ coworkingSpace.name }}\n                  \n                  \n                    {{ coworkingSpace.address }}\n                  \n                  \n                    \n                  \n                \n                }\n              \n            \n          \n        \n      \n      }\n\n      } @else {\n      No City Found\n      }\n\n      {{ city() | json }} -->\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                @if (city()) {                                  {{ city().name }}        {{ city().country }}                                                            Internet Speed                                                                        Weather Info                              Temperature {{ city().climate.averageTemperature }}C°                                Rainfall {{ city().climate.rainfall }}mm                              @if (city().coworkingSpaces) {                                                                  Coworking Spaces Info                                                                    @for (coworkingSpace of city().coworkingSpaces; track coworkingSpace) {                                                      {{ coworkingSpace.name }}                                                        {{ coworkingSpace.address }}                                                                                                          }                                                        }      } @else {      No City Found      }      {{ city() | json }} -->      '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CityComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CityInfoResponse.html":{"url":"interfaces/CityInfoResponse.html","title":"interface - CityInfoResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CityInfoResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response object for city information.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cityId\n                                        \n                                \n                                \n                                        \n                                            climate\n                                        \n                                \n                                \n                                        \n                                            costOfLivingIndex\n                                        \n                                \n                                \n                                        \n                                            country\n                                        \n                                \n                                \n                                        \n                                            coworkingSpaces\n                                        \n                                \n                                \n                                        \n                                            internetSpeed\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            safetyIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cityId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        climate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        climate:         Climate\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Climate\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        costOfLivingIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        costOfLivingIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        coworkingSpaces\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coworkingSpaces:         CoworkingSpace[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CoworkingSpace[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        internetSpeed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        internetSpeed:         InternetSpeed\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InternetSpeed\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        safetyIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        safetyIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Climate.html":{"url":"interfaces/Climate.html","title":"interface - Climate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Climate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the climate data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            averageTemperature\n                                        \n                                \n                                \n                                        \n                                            rainfall\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        averageTemperature\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        averageTemperature:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rainfall\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rainfall:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CoworkingSpace.html":{"url":"interfaces/CoworkingSpace.html","title":"interface - CoworkingSpace","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CoworkingSpace\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a coworking space.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            rating\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rating\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rating:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DashboardComponent.html":{"url":"components/DashboardComponent.html","title":"component - DashboardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/components/dashboard/dashboard.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the DashboardComponent class.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dashboard\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./dashboard.component.html\n            \n\n\n\n            \n                styleUrl\n                ./dashboard.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonLogOutConfig\n                            \n                            \n                                buttonsNavbar\n                            \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                name\n                            \n                            \n                                navbarConfig\n                            \n                            \n                                token\n                            \n                            \n                                token$\n                            \n                            \n                                user\n                            \n                            \n                                userFacade\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                onClickButton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/dashboard/dashboard.component.ts:136\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when the component is about to be destroyed.\nIt is used to perform any necessary cleanup logic, such as unsubscribing from observables or\nreleasing resources.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClickButton\n                        \n                    \n                \n            \n            \n                \nonClickButton(button: ButtonConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/dashboard/dashboard.component.ts:115\n                        \n                    \n\n\n            \n                \n                        Handles the click event of a button in the dashboard component.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                button\n                                            \n                                                            ButtonConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe button configuration object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buttonLogOutConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ButtonConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: 'logout',\n    classButtonType: 'btn-link',\n    typeButtonType: 'button',\n    label: 'Log out',\n    customClass: 'text-decoration-none text-white',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:94\n                        \n                    \n\n            \n                \n                    Configuration for the logout button.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buttonsNavbar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ButtonConfig[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: 'homepage',\n      classButtonType: 'btn-link',\n      typeButtonType: 'button',\n      label: 'Homepage',\n      customClass: 'text-decoration-none text-white',\n    },\n    {\n      id: 'about',\n      classButtonType: 'btn-link',\n      typeButtonType: 'button',\n      label: 'About',\n      customClass: 'text-decoration-none text-white',\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:74\n                        \n                    \n\n            \n                \n                    Array of button configurations for the navbar.\nEach button configuration contains properties like classButtonType, typeButtonType, label, and customClass.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:58\n                        \n                    \n\n            \n                \n                    Subject used to signal the destruction of the component.\nThis subject is used to unsubscribe from observables and perform cleanup operations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => this.user().name || localStorage.getItem('name') || '')\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:47\n                        \n                    \n\n            \n                \n                    Computed signal that represents the user's name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navbarConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NavbarConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    imgLogo: IMAGES.YANCHWAREGO_MINI_LOGO,\n    buttonsNavbarStart: this.buttonsNavbar,\n    buttonsNavbarEnd: [this.buttonLogOutConfig],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:105\n                        \n                    \n\n            \n                \n                    Configuration object for the navbar in the dashboard component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => this.user().token)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:42\n                        \n                    \n\n            \n                \n                    Computed signal that represents the user's token.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.userFacade.userState$.subscribe(\n    (user: UserState) => {\n      this.user.set(user);\n    }\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:64\n                        \n                    \n\n            \n                \n                    Reactive subscription to the user state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal({} as UserState)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:37\n                        \n                    \n\n            \n                \n                    Signal that represents the user state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:52\n                        \n                    \n\n            \n                \n                    Inject the UserFacade Pattern.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, OnDestroy, computed, inject, signal } from '@angular/core';\nimport { IMAGES } from '@src/app/constants/images';\nimport { NavBarComponent } from '@src/app/shared/components/navbar/navbar.component';\nimport { ButtonConfig } from '@src/app/shared/models/button.model';\nimport { NavbarConfig } from '@src/app/shared/models/navbar.model';\nimport { Subject, Subscription } from 'rxjs';\nimport { UserFacade } from '../../../core/store/user/user.facade';\nimport { UserState } from '../../../core/store/user/user.reducer';\nimport { CitiesComponent } from '../../../core/components/cities/cities.component';\n\n/**\n * Array of components used in the dashboard.\n */\nconst COMPONENTS = [\n  NavBarComponent,\n  CitiesComponent,\n];\n\n/**\n * Represents the DashboardComponent class.\n */\n@Component({\n  selector: 'app-dashboard',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ...COMPONENTS\n  ],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss',\n})\nexport class DashboardComponent implements OnDestroy {\n  /**\n   * Signal that represents the user state.\n   */\n  user = signal({} as UserState);\n\n  /**\n   * Computed signal that represents the user's token.\n   */\n  token = computed(() => this.user().token);\n\n  /**\n   * Computed signal that represents the user's name.\n   */\n  name = computed(() => this.user().name || localStorage.getItem('name') || '');\n\n  /**\n   * Inject the UserFacade Pattern.\n   **/\n  userFacade = inject(UserFacade);\n\n  /**\n   * Subject used to signal the destruction of the component.\n   * This subject is used to unsubscribe from observables and perform cleanup operations.\n   */\n  private destroy$ = new Subject();\n\n  \n  /**\n   * Reactive subscription to the user state.\n   */\n  token$: Subscription = this.userFacade.userState$.subscribe(\n    (user: UserState) => {\n      this.user.set(user);\n    }\n  );\n\n  /**\n   * Array of button configurations for the navbar.\n   * Each button configuration contains properties like classButtonType, typeButtonType, label, and customClass.\n   */\n  buttonsNavbar: ButtonConfig[] = [\n    {\n      id: 'homepage',\n      classButtonType: 'btn-link',\n      typeButtonType: 'button',\n      label: 'Homepage',\n      customClass: 'text-decoration-none text-white',\n    },\n    {\n      id: 'about',\n      classButtonType: 'btn-link',\n      typeButtonType: 'button',\n      label: 'About',\n      customClass: 'text-decoration-none text-white',\n    },\n  ];\n\n  /**\n   * Configuration for the logout button.\n   */\n  buttonLogOutConfig: ButtonConfig = {\n    id: 'logout',\n    classButtonType: 'btn-link',\n    typeButtonType: 'button',\n    label: 'Log out',\n    customClass: 'text-decoration-none text-white',\n  };\n\n  /**\n   * Configuration object for the navbar in the dashboard component.\n   */\n  navbarConfig: NavbarConfig = {\n    imgLogo: IMAGES.YANCHWAREGO_MINI_LOGO,\n    buttonsNavbarStart: this.buttonsNavbar,\n    buttonsNavbarEnd: [this.buttonLogOutConfig],\n  };\n\n  /**\n   * Handles the click event of a button in the dashboard component.\n   * @param button - The button configuration object.\n   */\n  onClickButton(button: ButtonConfig) {\n    switch (button.id) {\n      /**\n       * Logs out the user through UserFacade Pattern.\n       */\n      case 'logout': {\n        this.userFacade.logOut();\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Lifecycle hook that is called when the component is about to be destroyed.\n   * It is used to perform any necessary cleanup logic, such as unsubscribing from observables or\n   * releasing resources.\n   */\n  ngOnDestroy() {\n    this.token$.unsubscribe();\n    this.destroy$.next();  \n  }\n\n}\n\n    \n\n    \n        \n  \n\n  \n    Welcome {{ name() }}\n  \n\n  \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        Welcome {{ name() }}          '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DashboardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardEffects.html":{"url":"injectables/DashboardEffects.html","title":"injectable - DashboardEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/dashboard/dashboard.effects.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable class representing the effects for the dashboard feature.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                action$\n                            \n                            \n                                dashboardService\n                            \n                            \n                                    Public\n                                getCity$\n                            \n                            \n                                    Public\n                                login$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        action$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.effects.ts:16\n                        \n                    \n\n            \n                \n                    Observable stream of actions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dashboardService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DashboardService)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.effects.ts:21\n                        \n                    \n\n            \n                \n                    The service responsible for handling dashboard-related functionality.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCity$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(getCity),\n      switchMap(({ cityId }) =>\n        this.dashboardService\n          .getCity(cityId)\n          .pipe(\n            map((city: CityInfoResponse) => {\n              return getCitySuccess({ city });\n            })\n          )\n      )\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.effects.ts:46\n                        \n                    \n\n            \n                \n                    Effect for handling the getCity action.\nRetrieves the city information based on the provided cityId and dispatches the getCitySuccess action.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(cities),\n      switchMap(({ getCitiesPayload }) =>\n        this.dashboardService\n          .getCities(getCitiesPayload || ({} as GetCitiesPayload))\n          .pipe(\n            map((cities: Cities) => {\n              return citiesSuccess({ cities });\n            })\n          )\n      )\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.effects.ts:27\n                        \n                    \n\n            \n                \n                    Effect for handling the login action.\nRetrieves the cities based on the provided payload and dispatches the citiesSuccess action.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, switchMap } from 'rxjs';\nimport { DashboardService } from '../../../modules/services/dashboard.service';\nimport { Cities, CityInfoResponse, GetCitiesPayload } from '../../models/dashboard.model';\nimport { cities, citiesSuccess, getCity, getCitySuccess } from './dashboard.actions';\n\n/**\n * Injectable class representing the effects for the dashboard feature.\n */\n@Injectable()\nexport class DashboardEffects {\n  /**\n   * Observable stream of actions.\n   */\n  action$ = inject(Actions);\n\n  /**\n   * The service responsible for handling dashboard-related functionality.\n   */\n  dashboardService = inject(DashboardService);\n\n  /**\n   * Effect for handling the login action.\n   * Retrieves the cities based on the provided payload and dispatches the citiesSuccess action.\n   */\n  public login$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(cities),\n      switchMap(({ getCitiesPayload }) =>\n        this.dashboardService\n          .getCities(getCitiesPayload || ({} as GetCitiesPayload))\n          .pipe(\n            map((cities: Cities) => {\n              return citiesSuccess({ cities });\n            })\n          )\n      )\n    )\n  );\n\n  /**\n   * Effect for handling the getCity action.\n   * Retrieves the city information based on the provided cityId and dispatches the getCitySuccess action.\n   */\n  public getCity$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(getCity),\n      switchMap(({ cityId }) =>\n        this.dashboardService\n          .getCity(cityId)\n          .pipe(\n            map((city: CityInfoResponse) => {\n              return getCitySuccess({ city });\n            })\n          )\n      )\n    )\n  );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardFacade.html":{"url":"injectables/DashboardFacade.html","title":"injectable - DashboardFacade","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardFacade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/dashboard/dashboard.facade.ts\n        \n\n\n            \n                Description\n            \n            \n                Facade Pattern for managing dashboard-related state and actions.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cities$\n                            \n                            \n                                    Public\n                                getCity$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cities\n                            \n                            \n                                    Public\n                                getCity\n                            \n                            \n                                    Public\n                                resetCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/store/dashboard/dashboard.facade.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cities\n                        \n                    \n                \n            \n            \n                \n                        \n                    cities(getCitiesPayload?: GetCitiesPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/dashboard/dashboard.facade.ts:30\n                        \n                    \n\n\n            \n                \n                        Dispatches an action to fetch cities data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getCitiesPayload\n                                            \n                                                            GetCitiesPayload\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional payload for fetching cities.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCity\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCity(cityId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/dashboard/dashboard.facade.ts:38\n                        \n                    \n\n\n            \n                \n                        Dispatches an action to fetch a specific city data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cityId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to fetch.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetCity\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetCity()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/dashboard/dashboard.facade.ts:45\n                        \n                    \n\n\n            \n                \n                        Dispatches an action to reset the city data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cities$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(cities$)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.facade.ts:17\n                        \n                    \n\n            \n                \n                    Observable stream of cities data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCity$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(getCity$)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.facade.ts:22\n                        \n                    \n\n            \n                \n                    Observable stream of a specific city data.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Cities, GetCitiesPayload } from '../../models/dashboard.model';\nimport { cities, getCity, resetCity } from './dashboard.actions';\nimport { Observable } from 'rxjs';\nimport { cities$, getCity$ } from './dashboard.selectors';\n\n/**\n * Facade Pattern for managing dashboard-related state and actions.\n */\n@Injectable({ providedIn: 'root' })\nexport class DashboardFacade {\n\n  /**\n   * Observable stream of cities data.\n   */\n  public cities$: Observable = this.store.select(cities$);\n\n  /**\n   * Observable stream of a specific city data.\n   */\n  public getCity$: Observable = this.store.select(getCity$);\n\n  constructor(private store: Store) {}\n\n  /**\n   * Dispatches an action to fetch cities data.\n   * @param getCitiesPayload - Optional payload for fetching cities.\n   */\n  public cities(getCitiesPayload?: GetCitiesPayload): void {\n    this.store.dispatch(cities({ getCitiesPayload }));\n  }\n\n  /**\n   * Dispatches an action to fetch a specific city data.\n   * @param cityId - The ID of the city to fetch.\n   */\n  public getCity(cityId: string): void {\n    this.store.dispatch(getCity({ cityId }));\n  }\n\n  /**\n   * Dispatches an action to reset the city data.\n   */\n  public resetCity(): void {\n    this.store.dispatch(resetCity());\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardService.html":{"url":"injectables/DashboardService.html","title":"injectable - DashboardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/services/dashboard.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCities\n                            \n                            \n                                getCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/services/dashboard.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCities\n                        \n                    \n                \n            \n            \n                \ngetCities(undefined: GetCitiesPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/services/dashboard.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of cities.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            GetCitiesPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable of type Cities containing the list of cities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCity\n                        \n                    \n                \n            \n            \n                \ngetCity(cityId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/services/dashboard.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves detailed information about a specific city.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cityId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to retrieve information for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of type CityInfoResponse containing the city information.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Cities, CityInfoResponse, GetCitiesPayload } from '../../core/models/dashboard.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DashboardService {\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Retrieves a list of cities.\n   * @param limit - The maximum number of cities to retrieve. Default is 20.\n   * @param offset - The number of cities to skip. Default is 0.\n   * @returns An Observable of type Cities containing the list of cities.\n   */\n  getCities({ limit = 20, offset = 0 }: GetCitiesPayload): Observable {\n    // FIXME: Remove this hardcoded response and uncomment line 31 to test whit real data\n    return of({ cities: [\n      { cityId: '1', name: 'New York', country: 'USA' },\n      { cityId: '2', name: 'Los Angeles', country: 'USA' },\n      { cityId: '3', name: 'San Francisco', country: 'USA' },\n      { cityId: '4', name: 'Chicago', country: 'USA' },\n      { cityId: '5', name: 'Miami', country: 'USA' },\n      { cityId: '6', name: 'Las Vegas', country: 'USA' },\n      { cityId: '7', name: 'Orlando', country: 'USA' },\n      { cityId: '8', name: 'Seattle', country: 'USA' },\n      { cityId: '9', name: 'Boston', country: 'USA' },\n    ], count: 0 } as Cities);\n    // return this.http.get(`${environment.baseUrl}/${ENDPOINTS.CITIES}?limit=${limit}&offset=${offset}`);\n  }\n\n  /**\n   * Retrieves detailed information about a specific city.\n   * @param cityId - The ID of the city to retrieve information for.\n   * @returns An Observable of type CityInfoResponse containing the city information.\n   */\n  getCity(cityId: string): Observable {\n    // FIXME: Remove this hardcoded response and uncomment line 55 to test whit real data\n    return of({\n      cityId: '1',\n      name: 'New York',\n      country: 'USA',\n      costOfLivingIndex: 70,\n      internetSpeed: { download: 73, upload: 53 },\n      coworkingSpaces: [\n        { name: 'Coworking Space 1', address: 'Address 1', rating: 5 },\n        { name: 'Coworking Space 2', address: 'Address 2', rating: 4 },\n        { name: 'Coworking Space 3', address: 'Address 3', rating: 3 },\n      ],\n      safetyIndex: 89,\n      climate: { averageTemperature: 24, rainfall: 82 },\n    } as CityInfoResponse);\n    // return this.http.get(`${environment.baseUrl}/${ENDPOINTS.CITIES}/${cityId}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DashboardState.html":{"url":"interfaces/DashboardState.html","title":"interface - DashboardState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DashboardState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/dashboard/dashboard.reducer.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the state of the dashboard.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cities\n                                        \n                                \n                                \n                                        \n                                            city\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cities:         Cities\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cities\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        city\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        city:         CityInfoResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CityInfoResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createReducer, on } from '@ngrx/store';\nimport { Cities, CityInfoResponse } from '../../models/dashboard.model';\nimport { citiesSuccess, getCitySuccess, resetCity } from './dashboard.actions';\n\n/**\n * The key used to identify the dashboard feature in the store.\n */\nexport const dashboardFeatureKey = 'search';\n\n/**\n * Represents the state of the dashboard.\n */\nexport interface DashboardState {\n  cities: Cities;\n  city: CityInfoResponse;\n}\n\n/**\n * The initial state for the dashboard reducer.\n */\nconst initialState: DashboardState = {\n  cities: {} as Cities,\n  city: {} as CityInfoResponse,\n};\n\n/**\n * Reducer function for the dashboard state.\n */\nexport const dashboardReducer = createReducer(\n  initialState,\n  /**\n   * Updates the state with the list of cities.\n   * @param state - The current state.\n   * @param cities - The list of cities.\n   * @returns The updated state with the list of cities.\n   */\n  on(citiesSuccess, (state, { cities }) => ({ ...state, cities })),\n  /**\n   * Updates the state with a single city.\n   * @param state - The current state.\n   * @param city - The city object.\n   * @returns The updated state with the city object.\n   */\n  on(getCitySuccess, (state, { city }) => ({ ...state, city })),\n  /**\n   * Resets the city object in the state.\n   * @param state - The current state.\n   * @returns The updated state with an empty city object.\n   */\n  on(resetCity, (state) => ({ ...state, city: {} as CityInfoResponse }))\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FooterLogoModel.html":{"url":"interfaces/FooterLogoModel.html","title":"interface - FooterLogoModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FooterLogoModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the model for the footer logo.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            logoSrc\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logoSrc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logoSrc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FooterTextModel.html":{"url":"interfaces/FooterTextModel.html","title":"interface - FooterTextModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FooterTextModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the model for the footer text.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            labelLink\n                                        \n                                \n                                \n                                        \n                                            routerLink\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        labelLink\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelLink:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routerLink\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        routerLink:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormComponent.html":{"url":"components/FormComponent.html","title":"component - FormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/form/form.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents a form component.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-form\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                MODULE\n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./form.component.html\n            \n\n\n\n            \n                styleUrl\n                ./form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupService\n                            \n                            \n                                cardModel\n                            \n                            \n                                    Protected\n                                form\n                            \n                            \n                                formBuilder\n                            \n                            \n                                formModel\n                            \n                            \n                                onSubmitForm\n                            \n                            \n                                searchFormValueChanges\n                            \n                            \n                                searchValueChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                            \n                                updateFormValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmitForm\n                            \n                            \n                                searchValueChanges\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        formModel\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/form/form.component.ts:55\n                            \n                        \n                \n                    \n                        Represents the model for the form.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onSubmitForm\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/form/form.component.ts:61\n                            \n                        \n                \n                    \n                        Event emitted when the form is submitted.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        searchValueChanges\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/form/form.component.ts:66\n                            \n                        \n                \n                    \n                        Event emitted when the search value changes.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/form/form.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/form/form.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Handles the form submission.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateFormValue\n                        \n                    \n                \n            \n            \n                \nupdateFormValue(value: FormControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/form/form.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Updates the form value with the given value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        FormControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form control value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AlertPopupService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cardModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CardConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    cardBodyCustomClass: 'px-5 form__card',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:47\n                        \n                    \n\n            \n                \n                    Represents the configuration for the card in the form component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                \n                    \n                        Default value : new FormGroup({})\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(FormBuilder)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formModel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:55\n                        \n                    \n\n            \n                \n                    Represents the model for the form.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmitForm\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:61\n                        \n                    \n\n            \n                \n                    Event emitted when the form is submitted.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchFormValueChanges\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.form.valueChanges.subscribe((value: FormControl) => {\n    this.searchValueChanges.emit(Object.values(value)[0]);\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:76\n                        \n                    \n\n            \n                \n                    Subscribes to the value changes of the search form and emits the search value.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    value\n                                                    \n                                                            \nThe form control value.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchValueChanges\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:66\n                        \n                    \n\n            \n                \n                    Event emitted when the search value changes.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, OnInit, inject, input, output } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { CardConfig } from '../../models/card.model';\nimport {\n  FormModel,\n  FormOutputModel,\n  InputFormModel,\n} from '../../models/form.model';\nimport { AlertPopupService } from '../../services/alert-popup.service';\nimport { ButtonComponent } from '../button/button.component';\nimport { CardComponent } from '../card/card.component';\n\n/**\n * Array of modules used in the form component.\n */\nconst MODULE = [CommonModule, ReactiveFormsModule, RouterLink];\n\n/**\n * Array of components used in the component.\n */\nconst COMPONENTS = [CardComponent, ButtonComponent];\n\n/**\n * Represents a form component.\n */\n@Component({\n  selector: 'app-form',\n  standalone: true,\n  imports: [...MODULE, ...COMPONENTS],\n  templateUrl: './form.component.html',\n  styleUrl: './form.component.scss',\n})\nexport class FormComponent implements OnInit {\n  // Variables\n  protected form: FormGroup = new FormGroup({});\n\n  /**\n   * Represents the configuration for the card in the form component.\n   */\n  cardModel: CardConfig = {\n    cardBodyCustomClass: 'px-5 form__card',\n  };\n\n  // Input\n  /**\n   * Represents the model for the form.\n   */\n  formModel = input.required();\n\n  // Output\n  /**\n   * Event emitted when the form is submitted.\n   */\n  onSubmitForm = output();\n\n  /**\n   * Event emitted when the search value changes.\n   */\n  searchValueChanges = output();\n\n  // Inject\n  formBuilder = inject(FormBuilder);\n  alertPopupService = inject(AlertPopupService);\n\n  /**\n   * Subscribes to the value changes of the search form and emits the search value.\n   * @param value - The form control value.\n   */\n  searchFormValueChanges = this.form.valueChanges.subscribe((value: FormControl) => {\n    this.searchValueChanges.emit(Object.values(value)[0]);\n  });\n\n  ngOnInit(): void {\n    this.formModel()?.inputElements.forEach((input: InputFormModel) => {\n      this.form.addControl(\n        input.label.toLowerCase().trim(),\n        this.formBuilder.control('', [...input.inputValidator])\n      );\n    });\n  }\n\n  /**\n   * Handles the form submission.\n   */\n  onSubmit() {\n    if (this.form.valid) {\n      if (\n        this.formModel().type === 'register' &&\n        this.form.value.password !== this.form.value['confirm password']\n      ) {\n        /*\n         * Handle password mismatch with a custom alert popup.\n         */\n        this.alertPopupService.show({\n          alertType: 'danger',\n          label: 'Passwords do not match',\n          isVisible: true,\n        });\n        return;\n      }\n      this.onSubmitForm.emit(this.form.value);\n    } else {\n      // Handle form validation errors\n      console.log('Form is invalid');\n    }\n    this.form.reset();\n  }\n\n  /**\n   * Updates the form value with the given value.\n   * @param value - The form control value.\n   */\n  updateFormValue(value: FormControl) {\n    this.form.patchValue(value);\n  }\n}\n\n    \n\n    \n        \n\n  @if(formModel().backgroundSrc) {\n  \n    \n  \n  }\n\n  \n    \n\n      @if(formModel().logoSrc) {\n      \n      }\n\n      @if(formModel().title) {\n      {{ formModel().title?.label }}\n      }\n\n      @for(inputElement of formModel().inputElements; track inputElement) {\n\n      \n        {{ inputElement.label }}\n\n        @if (formModel().type !== 'search') {\n        \n        \n          Invalid {{ inputElement.label }}\n        \n        } @else {\n        \n        }\n      \n      }\n      @for (buttonElement of formModel().buttonElements; track buttonElement) {\n      \n        \n      \n      }\n\n      @if(formModel().footerText) {\n      \n        {{ formModel().footerText?.text }}\n        {{ formModel().footerText?.labelLink }}\n      \n      }\n\n      @if(formModel().footerLogo) {\n      \n        \n          {{ formModel().footerLogo?.label }}\n          \n        \n      \n      }\n\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  @if(formModel().backgroundSrc) {          }            @if(formModel().logoSrc) {            }      @if(formModel().title) {      {{ formModel().title?.label }}      }      @for(inputElement of formModel().inputElements; track inputElement) {              {{ inputElement.label }}        @if (formModel().type !== \\'search\\') {                          Invalid {{ inputElement.label }}                } @else {                }            }      @for (buttonElement of formModel().buttonElements; track buttonElement) {                          }      @if(formModel().footerText) {              {{ formModel().footerText?.text }}        {{ formModel().footerText?.labelLink }}            }      @if(formModel().footerLogo) {                        {{ formModel().footerLogo?.label }}                              }      '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormModel.html":{"url":"interfaces/FormModel.html","title":"interface - FormModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a form model.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            backgroundSrc\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            buttonElements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cardCustomClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footerLogo\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footerText\n                                        \n                                \n                                \n                                        \n                                            inputElements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            logoSrc\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundSrc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backgroundSrc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        buttonElements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buttonElements:         ButtonConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonConfig[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cardCustomClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cardCustomClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footerLogo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footerLogo:         FooterLogoModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FooterLogoModel\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footerText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footerText:         FooterTextModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FooterTextModel\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputElements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputElements:     InputFormModel[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     InputFormModel[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logoSrc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logoSrc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         TitleFormModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TitleFormModel\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         TypeFormModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TypeFormModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormOutputModel.html":{"url":"interfaces/FormOutputModel.html","title":"interface - FormOutputModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormOutputModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/models/form.model.ts:4\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetCitiesPayload.html":{"url":"interfaces/GetCitiesPayload.html","title":"interface - GetCitiesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetCitiesPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the payload for getting cities.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            offset\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InputFormModel.html":{"url":"interfaces/InputFormModel.html","title":"interface - InputFormModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InputFormModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the model for an input form.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customClass\n                                        \n                                \n                                \n                                        \n                                            inputType\n                                        \n                                \n                                \n                                        \n                                            inputValidator\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputType:         InputFormType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InputFormType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputValidator:     ValidatorFn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ValidatorFn[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InternetSpeed.html":{"url":"interfaces/InternetSpeed.html","title":"interface - InternetSpeed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InternetSpeed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the internet speed with download and upload values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            download\n                                        \n                                \n                                \n                                        \n                                            upload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        download\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        download:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        upload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        upload:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/components/login/login.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the LoginComponent class.\nThis component is responsible for handling the login functionality.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                FormComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                formModel\n                            \n                            \n                                loginRegisterService\n                            \n                            \n                                token\n                            \n                            \n                                userFacade\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmitForm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmitForm\n                        \n                    \n                \n            \n            \n                \nonSubmitForm(formOutputModel: FormOutputModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/login/login.component.ts:84\n                        \n                    \n\n\n            \n                \n                        Handles the form submission event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                formOutputModel\n                                            \n                                                            FormOutputModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe output model of the form.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        formModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormModel\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'login',\n    logoSrc: IMAGES.YANCHWAREGO_LOGO,\n    title: {\n      label: 'Sign in',\n    },\n    inputElements: [\n      {\n        label: 'Email',\n        inputType: 'email',\n        inputValidator: [Validators.required, Validators.email],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-3',\n      },\n    ],\n    buttonElements: [\n      {\n        id: 'signin',\n        classButtonType: 'btn-primary',\n        typeButtonType: 'submit',\n        label: 'Sign in',\n        customClass: 'w-100',\n      },\n    ],\n    footerText: {\n      text: 'Don’t you have an account?',\n      labelLink: 'Create new one',\n      routerLink: `/${ROUTE.REGISTER}`,\n    },\n    footerLogo: {\n      label: 'Powered by',\n      logoSrc: IMAGES.YANCHWARE_LOGO,\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/login/login.component.ts:26\n                        \n                    \n\n            \n                \n                    Represents the form model for the login component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginRegisterService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(LoginRegisterService)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/login/login.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.userFacade.token$\n    .pipe(filter(Boolean))\n    .subscribe((token) => {\n      console.log('Token:', token);\n    })\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/login/login.component.ts:74\n                        \n                    \n\n            \n                \n                    Represents the subscription to the token$ observable.\nIt logs the token value when it is emitted.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/login/login.component.ts:67\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { UserFacade } from '../../../core/store/user/user.facade';\nimport { Subscription, filter } from 'rxjs';\nimport { Validators } from '@angular/forms';\nimport { ROUTE } from '../../../constants/route';\nimport { IMAGES } from '../../../constants/images';\nimport { FormComponent } from '@src/app/shared/components/form/form.component';\nimport { FormModel, FormOutputModel } from '@src/app/shared/models/form.model';\nimport { LoginRegisterService } from '../../services/loginRegisterService.service';\n\n/**\n * Represents the LoginComponent class.\n * This component is responsible for handling the login functionality.\n */\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [FormComponent],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n})\nexport class LoginComponent {\n  /**\n   * Represents the form model for the login component.\n   */\n  formModel: FormModel = {\n    type: 'login',\n    logoSrc: IMAGES.YANCHWAREGO_LOGO,\n    title: {\n      label: 'Sign in',\n    },\n    inputElements: [\n      {\n        label: 'Email',\n        inputType: 'email',\n        inputValidator: [Validators.required, Validators.email],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-3',\n      },\n    ],\n    buttonElements: [\n      {\n        id: 'signin',\n        classButtonType: 'btn-primary',\n        typeButtonType: 'submit',\n        label: 'Sign in',\n        customClass: 'w-100',\n      },\n    ],\n    footerText: {\n      text: 'Don’t you have an account?',\n      labelLink: 'Create new one',\n      routerLink: `/${ROUTE.REGISTER}`,\n    },\n    footerLogo: {\n      label: 'Powered by',\n      logoSrc: IMAGES.YANCHWARE_LOGO,\n    },\n  };\n\n  // Inject\n  userFacade = inject(UserFacade);\n  loginRegisterService = inject(LoginRegisterService);\n\n  /**\n   * Represents the subscription to the token$ observable.\n   * It logs the token value when it is emitted.\n   */\n  token: Subscription = this.userFacade.token$\n    .pipe(filter(Boolean))\n    .subscribe((token) => {\n      console.log('Token:', token);\n    });\n\n  /**\n   * Handles the form submission event.\n   * @param formOutputModel - The output model of the form.\n   */\n  onSubmitForm(formOutputModel: FormOutputModel) {\n    this.userFacade.login({\n      email: formOutputModel['email'],\n      password: formOutputModel['password'],\n    });\n  }\n}\n\n    \n\n    \n        \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginGuard.html":{"url":"injectables/LoginGuard.html","title":"injectable - LoginGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/guards/login.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/guards/login.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/guards/login.guard.ts:18\n                        \n                    \n\n\n            \n                \n                        Determines if the user is allowed to access the route.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true if the user is logged in, false otherwise and redirect to login route.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ROUTE } from '../constants/route';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * Guard that checks if the user is logged in before allowing access to a route.\n */\nexport class LoginGuard {\n  constructor(private router: Router) {}\n\n  /**\n   * Determines if the user is allowed to access the route.\n   * @returns true if the user is logged in, false otherwise and redirect to login route.\n   */\n  canActivate(): boolean {\n    if (localStorage.getItem('token') && localStorage.getItem('token') !== 'undefined') {\n      return true;\n    } else {\n      this.router.navigate([ROUTE.LOGIN]);\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginPayload.html":{"url":"interfaces/LoginPayload.html","title":"interface - LoginPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the payload for user login.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginRegisterService.html":{"url":"injectables/LoginRegisterService.html","title":"injectable - LoginRegisterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginRegisterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/services/loginRegisterService.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling login and registration functionality.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/services/loginRegisterService.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(loginPayload: LoginPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/services/loginRegisterService.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Performs a login operation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginPayload\n                                            \n                                                            LoginPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe login payload containing the email and password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An observable that emits the login response.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(registerPayload: RegisterPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/services/loginRegisterService.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Performs a registration operation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerPayload\n                                            \n                                                            RegisterPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe registration payload containing the email and password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An observable that emits the registration response.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LoginPayload, LoginResponse, RegisterPayload, RegisterResponse } from '../../core/models/user.model';\n// import { environment } from '../../../../environments/environment';\n// import { ENDPOINTS } from '../../../constants/endpoints';\n\n/**\n * Service responsible for handling login and registration functionality.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginRegisterService {\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Performs a login operation.\n   * @param loginPayload - The login payload containing the email and password.\n   * @returns An observable that emits the login response.\n   */\n  login(loginPayload: LoginPayload): Observable {\n    // FIXME: MOCK DATA\n    // return this.http.post(`${environment.baseUrl}/${ENDPOINTS.LOGIN}`, loginPayload);\n    const mockResponse: LoginResponse = {\n      token: 'your-token-string',\n      name: loginPayload.email.replace(/@.*/, '')\n    };\n    return of(mockResponse);\n  }\n\n  /**\n   * Performs a registration operation.\n   * @param registerPayload - The registration payload containing the email and password.\n   * @returns An observable that emits the registration response.\n   */\n  register(registerPayload: RegisterPayload): Observable {\n    // FIXME: MOCK DATA\n    // return this.http.post(`${environment.baseUrl}/${ENDPOINTS.REGISTER}`, registerPayload );\n    const mockResponse: RegisterResponse = {\n      token: 'your-token-string',\n      name: registerPayload.email.replace(/@.*/, '')\n    };\n    return of(mockResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response received after a successful login.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavBarComponent.html":{"url":"components/NavBarComponent.html","title":"component - NavBarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavBarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/navbar/navbar.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the navigation bar component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navbar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                navbarConfig\n                            \n                            \n                                onClickButton\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                navbarConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onClickButton\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        navbarConfig\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/navbar/navbar.component.ts:27\n                            \n                        \n                \n                    \n                        The configuration for the navigation bar.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onClickButton\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/navbar/navbar.component.ts:32\n                            \n                        \n                \n                    \n                        Event emitted when a button in the navigation bar is clicked.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        navbarConfig\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/navbar/navbar.component.ts:27\n                        \n                    \n\n            \n                \n                    The configuration for the navigation bar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClickButton\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/navbar/navbar.component.ts:32\n                        \n                    \n\n            \n                \n                    Event emitted when a button in the navigation bar is clicked.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, input, output } from '@angular/core';\nimport { NavbarConfig } from '../../models/navbar.model';\nimport { ButtonComponent } from '../button/button.component';\nimport { ButtonConfig } from '../../models/button.model';\n\nconst COMPONENTS = [\n  ButtonComponent,\n];\n\n/**\n * Represents the navigation bar component.\n */\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  imports: [\n    ...COMPONENTS\n  ],\n  templateUrl: './navbar.component.html',\n  styleUrl: './navbar.component.scss'\n})\nexport class NavBarComponent {\n\n  /**\n   * The configuration for the navigation bar.\n   */\n  navbarConfig = input.required();\n\n  /**\n   * Event emitted when a button in the navigation bar is clicked.\n   */\n  onClickButton = output();\n\n}\n\n    \n\n    \n        \n  \n\n    @if(navbarConfig().imgLogo) {\n    \n      \n    \n    }\n\n    \n      \n      \n        @if (navbarConfig().buttonsNavbarStart) {\n        @for(button of navbarConfig().buttonsNavbarStart; track button) {\n        \n          \n        \n        }\n        }\n      \n\n      @if (navbarConfig().buttonsNavbarEnd) {\n      @for (button of navbarConfig().buttonsNavbarEnd; track button) {\n      \n         -->\n        \n      \n      }\n      }\n\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      @if(navbarConfig().imgLogo) {                  }                        @if (navbarConfig().buttonsNavbarStart) {        @for(button of navbarConfig().buttonsNavbarStart; track button) {                                  }        }            @if (navbarConfig().buttonsNavbarEnd) {      @for (button of navbarConfig().buttonsNavbarEnd; track button) {               -->                    }      }      '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavBarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NavbarConfig.html":{"url":"interfaces/NavbarConfig.html","title":"interface - NavbarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NavbarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/navbar.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for the navbar.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buttonsNavbarEnd\n                                        \n                                \n                                \n                                        \n                                            buttonsNavbarStart\n                                        \n                                \n                                \n                                        \n                                            imgLogo\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buttonsNavbarEnd\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buttonsNavbarEnd:         ButtonConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonConfig[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        buttonsNavbarStart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buttonsNavbarStart:         ButtonConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonConfig[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imgLogo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imgLogo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ButtonConfig } from \"./button.model\";\n\n/**\n * Represents the configuration for the navbar.\n */\nexport interface NavbarConfig {\n  imgLogo: string;\n  buttonsNavbarStart: ButtonConfig[];\n  buttonsNavbarEnd: ButtonConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterPayload.html":{"url":"interfaces/RegisterPayload.html","title":"interface - RegisterPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the payload for user registration.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            surname\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterResponse.html":{"url":"interfaces/RegisterResponse.html","title":"interface - RegisterResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response object returned when registering a user.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegistrationComponent.html":{"url":"components/RegistrationComponent.html","title":"component - RegistrationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegistrationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/components/registration/registration.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the Registration Component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-registration\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                FormComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./registration.component.html\n            \n\n\n\n            \n                styleUrl\n                ./registration.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                formModel\n                            \n                            \n                                loginRegisterService\n                            \n                            \n                                userFacade\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmitForm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmitForm\n                        \n                    \n                \n            \n            \n                \nonSubmitForm(formOutputModel: FormOutputModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/registration/registration.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Handles the form submission event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                formOutputModel\n                                            \n                                                            FormOutputModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe output model from the form.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        formModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormModel\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'register',\n    logoSrc: IMAGES.YANCHWAREGO_LOGO,\n    title: {\n      label: 'Create an account'\n    },\n    inputElements: [\n      {\n        label: 'Name',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'my-2',\n      },\n      {\n        label: 'Surname',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'my-2',\n      },\n      {\n        label: 'Email',\n        inputType: 'email',\n        inputValidator: [Validators.required, Validators.email],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Confirm Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-3',\n      },\n    ],\n    buttonElements: [\n      {\n        id: 'signup',\n        classButtonType: 'btn-primary',\n        typeButtonType: 'submit',\n        label: 'Sign up',\n        customClass: 'w-100',\n      }],\n    footerText: {\n        text: 'Do you have an account?',\n        labelLink: 'Sign in',\n        routerLink: `/${ROUTE.LOGIN}`,\n    },\n    footerLogo: {\n        label: 'Powered by',\n        logoSrc: IMAGES.YANCHWARE_LOGO,\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/registration/registration.component.ts:24\n                        \n                    \n\n            \n                \n                    Represents the form model for registration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginRegisterService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(LoginRegisterService)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/registration/registration.component.ts:84\n                        \n                    \n\n            \n                \n                    Inject Service for handling login and registration functionality.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/registration/registration.component.ts:85\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { FormComponent } from '@src/app/shared/components/form/form.component';\nimport { FormModel, FormOutputModel } from '@src/app/shared/models/form.model';\nimport { IMAGES } from '../../../constants/images';\nimport { ROUTE } from '../../../constants/route';\nimport { LoginRegisterService } from '../../services/loginRegisterService.service';\nimport { UserFacade } from '../../../core/store/user/user.facade';\n\n/**\n * Represents the Registration Component.\n */\n@Component({\n  selector: 'app-registration',\n  standalone: true,\n  imports: [FormComponent],\n  templateUrl: './registration.component.html',\n  styleUrl: './registration.component.scss',\n})\nexport class RegistrationComponent {\n  /**\n   * Represents the form model for registration.\n   */\n  formModel: FormModel = {\n    type: 'register',\n    logoSrc: IMAGES.YANCHWAREGO_LOGO,\n    title: {\n      label: 'Create an account'\n    },\n    inputElements: [\n      {\n        label: 'Name',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'my-2',\n      },\n      {\n        label: 'Surname',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'my-2',\n      },\n      {\n        label: 'Email',\n        inputType: 'email',\n        inputValidator: [Validators.required, Validators.email],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Confirm Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-3',\n      },\n    ],\n    buttonElements: [\n      {\n        id: 'signup',\n        classButtonType: 'btn-primary',\n        typeButtonType: 'submit',\n        label: 'Sign up',\n        customClass: 'w-100',\n      }],\n    footerText: {\n        text: 'Do you have an account?',\n        labelLink: 'Sign in',\n        routerLink: `/${ROUTE.LOGIN}`,\n    },\n    footerLogo: {\n        label: 'Powered by',\n        logoSrc: IMAGES.YANCHWARE_LOGO,\n    },\n  };\n\n  /**\n   * Inject Service for handling login and registration functionality.\n   */\n  loginRegisterService = inject(LoginRegisterService);\n  userFacade = inject(UserFacade);\n\n  /**\n   * Handles the form submission event.\n   * @param formOutputModel - The output model from the form.\n   */\n  onSubmitForm(formOutputModel: FormOutputModel) {\n    this.userFacade.register({\n      name: formOutputModel['name'],\n      surname: formOutputModel['surname'],\n      email: formOutputModel['email'],\n      password: formOutputModel['password'],\n    });\n  }\n}\n\n    \n\n    \n        \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegistrationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StarRatingComponent.html":{"url":"components/StarRatingComponent.html","title":"component - StarRatingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  StarRatingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/star-rating/star-rating.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents a star rating component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-star-rating\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./star-rating.component.html\n            \n\n\n\n            \n                styleUrl\n                ./star-rating.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rating\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        rating\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/star-rating/star-rating.component.ts:17\n                            \n                        \n                \n                    \n                        The rating value of the star rating component.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        rating\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/star-rating/star-rating.component.ts:17\n                        \n                    \n\n            \n                \n                    The rating value of the star rating component.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, input } from '@angular/core';\n\n/**\n * Represents a star rating component.\n */\n@Component({\n  selector: 'app-star-rating',\n  standalone: true,\n  imports: [],\n  templateUrl: './star-rating.component.html',\n  styleUrl: './star-rating.component.scss'\n})\nexport class StarRatingComponent {\n  /**\n   * The rating value of the star rating component.\n   */\n  rating = input.required();\n}\n\n    \n\n    \n        \n  @for (star of [1, 2, 3, 4, 5]; track star) {\n  &#9733;\n  }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  @for (star of [1, 2, 3, 4, 5]; track star) {  ★  }'\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StarRatingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TitleFormModel.html":{"url":"interfaces/TitleFormModel.html","title":"interface - TitleFormModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TitleFormModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the form model for a title.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customClass\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserData.html":{"url":"interfaces/UserData.html","title":"interface - UserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the data of a user.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            router\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        router:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserEffects.html":{"url":"injectables/UserEffects.html","title":"injectable - UserEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/user/user.effects.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                action$\n                            \n                            \n                                    Public\n                                login$\n                            \n                            \n                                loginRegisterService\n                            \n                            \n                                    Public\n                                logOut$\n                            \n                            \n                                    Public\n                                register$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                removeUserDataRedirect\n                            \n                            \n                                    Private\n                                setUserDataRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/store/user/user.effects.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe router service\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeUserDataRedirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUserDataRedirect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.effects.ts:42\n                        \n                    \n\n\n            \n                \n                        Remove user data and redirect to the login page\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setUserDataRedirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUserDataRedirect(userData: UserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.effects.ts:33\n                        \n                    \n\n\n            \n                \n                        Set user data into localstorage and redirect to the specified router\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            UserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user data to be set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        action$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(login),\n      switchMap(({ payload }) =>\n        this.loginRegisterService.login(payload).pipe(\n          map(({ token, name }: LoginResponse) => {\n            const router: string = ROUTE.DASHBOARD;\n            this.setUserDataRedirect({ token, name, router});\n            return loginSuccess({response: { token, name }});\n          })\n        )\n      )\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:51\n                        \n                    \n\n            \n                \n                    Login effect, set the user data and redirect to the dashboard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginRegisterService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(LoginRegisterService)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logOut$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(logOut),\n      map(() => {\n        this.removeUserDataRedirect();\n        return logOutSuccess();\n      })\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:87\n                        \n                    \n\n            \n                \n                    Log out effect, remove the user data and redirect to the login page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        register$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(register),\n      switchMap(({ payload }) =>\n        this.loginRegisterService.register(payload).pipe(\n          map(({ token, name }: RegisterResponse) => {\n            const router: string = ROUTE.DASHBOARD;\n            this.setUserDataRedirect({ token, name, router});\n            return registerSuccess({ response: { token, name } });\n          })\n        )\n      )\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:69\n                        \n                    \n\n            \n                \n                    Register effect, set the user data and redirect to the dashboard\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, switchMap } from 'rxjs';\nimport { ROUTE } from '../../../constants/route';\nimport { LoginResponse, RegisterResponse, UserData } from '../../models/user.model';\nimport { LoginRegisterService } from '../../../modules/services/loginRegisterService.service';\nimport {\n  logOut,\n  logOutSuccess,\n  login,\n  loginSuccess,\n  register,\n  registerSuccess,\n} from './user.actions';\n\n@Injectable()\nexport class UserEffects {\n  // Inject dependencies\n  action$ = inject(Actions);\n  loginRegisterService = inject(LoginRegisterService);\n\n  /**\n   * Constructor\n   * @param router - The router service\n   */\n  constructor(private router: Router) {}\n\n  /**\n   * Set user data into localstorage and redirect to the specified router\n   * @param userData - The user data to be set\n   */\n  private setUserDataRedirect(userData: UserData): void {\n    localStorage.setItem('token', userData.token);\n    localStorage.setItem('name', userData.name);\n    this.router.navigate([userData.router]);\n  }\n\n  /**\n   * Remove user data and redirect to the login page\n   */\n  private removeUserDataRedirect(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('name');\n    this.router.navigate([ROUTE.LOGIN]);\n  }\n\n  /**\n   * Login effect, set the user data and redirect to the dashboard\n   */\n  public login$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(login),\n      switchMap(({ payload }) =>\n        this.loginRegisterService.login(payload).pipe(\n          map(({ token, name }: LoginResponse) => {\n            const router: string = ROUTE.DASHBOARD;\n            this.setUserDataRedirect({ token, name, router});\n            return loginSuccess({response: { token, name }});\n          })\n        )\n      )\n    )\n  );\n\n  /**\n   * Register effect, set the user data and redirect to the dashboard\n   */\n  public register$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(register),\n      switchMap(({ payload }) =>\n        this.loginRegisterService.register(payload).pipe(\n          map(({ token, name }: RegisterResponse) => {\n            const router: string = ROUTE.DASHBOARD;\n            this.setUserDataRedirect({ token, name, router});\n            return registerSuccess({ response: { token, name } });\n          })\n        )\n      )\n    )\n  );\n\n  /**\n   * Log out effect, remove the user data and redirect to the login page\n   */\n  public logOut$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(logOut),\n      map(() => {\n        this.removeUserDataRedirect();\n        return logOutSuccess();\n      })\n    )\n  );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFacade.html":{"url":"injectables/UserFacade.html","title":"injectable - UserFacade","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFacade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/user/user.facade.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                token$\n                            \n                            \n                                    Public\n                                userState$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                login\n                            \n                            \n                                    Public\n                                logOut\n                            \n                            \n                                    Public\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/store/user/user.facade.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(payload: LoginPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.facade.ts:27\n                        \n                    \n\n\n            \n                \n                        Dispatches a login action with the provided payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LoginPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The login payload.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    logOut()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.facade.ts:42\n                        \n                    \n\n\n            \n                \n                        Dispatches a log out action.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(payload: RegisterPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.facade.ts:35\n                        \n                    \n\n\n            \n                \n                        Dispatches a register action with the provided payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            RegisterPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The register payload.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        token$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(token$)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.facade.ts:19\n                        \n                    \n\n            \n                \n                    Observable representing the user token.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userState$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(userState$)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.facade.ts:14\n                        \n                    \n\n            \n                \n                    Observable representing the user state.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { logOut, login, register } from \"./user.actions\";\nimport { Observable } from \"rxjs\";\nimport { token$, userState$ } from \"./user.selectors\";\nimport { UserState } from \"./user.reducer\";\nimport { LoginPayload, RegisterPayload } from \"../../models/user.model\";\n\n@Injectable({ providedIn: 'root' })\nexport class UserFacade {\n  /**\n   * Observable representing the user state.\n   */\n  public userState$: Observable = this.store.select(userState$);\n\n  /**\n   * Observable representing the user token.\n   */\n  public token$: Observable = this.store.select(token$);\n\n  constructor(private store: Store) {}\n\n  /**\n   * Dispatches a login action with the provided payload.\n   * @param payload The login payload.\n   */\n  public login(payload: LoginPayload): void {\n    this.store.dispatch(login({ payload }));\n  }\n\n  /**\n   * Dispatches a register action with the provided payload.\n   * @param payload The register payload.\n   */\n  public register(payload: RegisterPayload): void {\n    this.store.dispatch(register({ payload }));\n  }\n  \n  /**\n   * Dispatches a log out action.\n   */\n  public logOut(): void {\n    this.store.dispatch(logOut());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserState.html":{"url":"interfaces/UserState.html","title":"interface - UserState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/user/user.reducer.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the state of the user in the application.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createReducer, on } from \"@ngrx/store\";\nimport { logOutSuccess, loginSuccess, registerSuccess } from \"./user.actions\";\n\n/**\n * The key used to access the user feature state in the Redux store.\n */\nexport const userFeatureKey = 'user';\n\n/**\n * Represents the state of the user in the application.\n */\nexport interface UserState {\n  name: string;\n  token: string;\n}\n\n/**\n * Initial state for the User reducer.\n */\nconst initialState: UserState = {\n  name: '',\n  token: '',\n}\n\n/**\n * Reducer function for managing user state.\n */\nexport const userReducer = createReducer(\n  initialState,\n  \n  /**\n   * Updates the state with the user's information after a successful login.\n   * @param state - The current user state.\n   * @param response - The response object containing the user's token and name.\n   * @returns The updated user state.\n   */\n  on(loginSuccess, (state, { response } ) => ({ ...state, token: response.token, name: response.name })),\n\n  /**\n   * Updates the state with the user's information after a successful registration.\n   * @param state - The current user state.\n   * @param response - The response object containing the user's token and name.\n   * @returns The updated user state.\n   */\n  on(registerSuccess, (state, { response } ) => ({ ...state, token: response.token, name: response.name })),\n\n  /**\n   * Resets the user state to the initial state after a successful logout.\n   * @returns The initial user state.\n   */\n  on(logOutSuccess, () => ( initialState ))\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants/endpoints.ts\n            \n            variable\n            ENDPOINTS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants/endpoints.ts\n            \n            variable\n            VERSIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants/images.ts\n            \n            variable\n            IMAGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants/route.ts\n            \n            variable\n            ROUTE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/components/cities/cities.component.ts\n            \n            component\n            CitiesComponent\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/core/components/cities/cities.component.ts\n            \n            variable\n            COMPONENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/components/cities/cities.component.ts\n            \n            variable\n            MODULES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            Cities\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            City\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            CityInfoResponse\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            Climate\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            CoworkingSpace\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            GetCitiesPayload\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            InternetSpeed\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            LoginPayload\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            LoginResponse\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            RegisterPayload\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            RegisterResponse\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            UserData\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            cities\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            citiesSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            getCity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            getCitySuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            resetCity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.effects.ts\n            \n            injectable\n            DashboardEffects\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.facade.ts\n            \n            injectable\n            DashboardFacade\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.reducer.ts\n            \n            interface\n            DashboardState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.reducer.ts\n            \n            variable\n            dashboardFeatureKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.reducer.ts\n            \n            variable\n            dashboardReducer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.reducer.ts\n            \n            variable\n            initialState\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.selectors.ts\n            \n            variable\n            cities$\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.selectors.ts\n            \n            variable\n            getCity$\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.selectors.ts\n            \n            variable\n            getDashboardFeature\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            login\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            loginSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            logOut\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            logOutSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            register\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            registerSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            setUserData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            setUserDataSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.effects.ts\n            \n            injectable\n            UserEffects\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.facade.ts\n            \n            injectable\n            UserFacade\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.reducer.ts\n            \n            interface\n            UserState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.reducer.ts\n            \n            variable\n            initialState\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.reducer.ts\n            \n            variable\n            userFeatureKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.reducer.ts\n            \n            variable\n            userReducer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.selectors.ts\n            \n            variable\n            getUserFeature\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.selectors.ts\n            \n            variable\n            token$\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.selectors.ts\n            \n            variable\n            userState$\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/guards/login.guard.ts\n            \n            injectable\n            LoginGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/modules/components/city/city.component.ts\n            \n            component\n            CityComponent\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/modules/components/city/city.component.ts\n            \n            variable\n            COMPONENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/modules/components/city/city.component.ts\n            \n            variable\n            MODULES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/modules/components/dashboard/dashboard.component.ts\n            \n            component\n            DashboardComponent\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/modules/components/dashboard/dashboard.component.ts\n            \n            variable\n            COMPONENTS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/modules/components/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/app/modules/components/registration/registration.component.ts\n            \n            component\n            RegistrationComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/modules/services/dashboard.service.ts\n            \n            injectable\n            DashboardService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/modules/services/loginRegisterService.service.ts\n            \n            injectable\n            LoginRegisterService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/app/shared/components/alert-popup/alert-popup.component.ts\n            \n            component\n            AlertPopupComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/shared/components/bar-chart/bar-chart.component.ts\n            \n            component\n            BarChartComponent\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/app/shared/components/button/button.component.ts\n            \n            component\n            ButtonComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/shared/components/card/card.component.ts\n            \n            component\n            CardComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/shared/components/form/form.component.ts\n            \n            component\n            FormComponent\n            \n                73 %\n                (11/15)\n            \n        \n        \n            \n                \n                src/app/shared/components/form/form.component.ts\n            \n            variable\n            COMPONENTS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/shared/components/form/form.component.ts\n            \n            variable\n            MODULE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/shared/components/navbar/navbar.component.ts\n            \n            component\n            NavBarComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/shared/components/navbar/navbar.component.ts\n            \n            variable\n            COMPONENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/components/star-rating/star-rating.component.ts\n            \n            component\n            StarRatingComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/shared/models/alert-popup.model.ts\n            \n            interface\n            AlertPopupConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/shared/models/alert-popup.model.ts\n            \n            variable\n            TIMER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/models/button.model.ts\n            \n            interface\n            ButtonConfig\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/shared/models/card.model.ts\n            \n            interface\n            CardConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            FooterLogoModel\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            FooterTextModel\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            FormModel\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            FormOutputModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            InputFormModel\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            TitleFormModel\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/shared/models/navbar.model.ts\n            \n            interface\n            NavbarConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/shared/services/alert-popup.service.ts\n            \n            injectable\n            AlertPopupService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.3.0\n        \n            @angular/common : ^17.3.0\n        \n            @angular/compiler : ^17.3.0\n        \n            @angular/core : ^17.3.0\n        \n            @angular/forms : ^17.3.0\n        \n            @angular/platform-browser : ^17.3.0\n        \n            @angular/platform-browser-dynamic : ^17.3.0\n        \n            @angular/router : ^17.3.0\n        \n            @ngrx/effects : ^17.2.0\n        \n            @ngrx/store : ^17.2.0\n        \n            @ngrx/store-devtools : ^17.2.0\n        \n            bootstrap : ^5.3.3\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nYanchwareGo\nThis project was generated with Angular CLI version 17.3.5.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\nOpen API Mocker\nTo install the open-api-mocker package globally, run the following command:\nnpm i -g open-api-mocker\nOpen API Start Mock Server\nTo start the mock server run the server-start script:\nnpm run server start\nOr you can choose to launch direct the follow command in the root of this project:\nopen-api-mocker -s server/sr.frontend.challenge.yml -p 1234 -w\n-p 1234 set the local port, feel free to choose whatever you want\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    13 Components\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AlertPopupType   (src/.../alert-popup.model.ts)\n                        \n                        \n                            ButtonClassType   (src/.../button.model.ts)\n                        \n                        \n                            ButtonType   (src/.../button.model.ts)\n                        \n                        \n                            CardType   (src/.../card.model.ts)\n                        \n                        \n                            InputFormType   (src/.../form.model.ts)\n                        \n                        \n                            TypeFormModel   (src/.../form.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/models/alert-popup.model.ts\n    \n    \n        \n            \n                \n                    \n                    AlertPopupType\n                \n            \n            \n                \n                    Represents the type of an alert popup.\nPossible values include: 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'.\n\n                \n            \n            \n                \n                        \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\"\n\n                \n            \n        \n    \n    src/app/shared/models/button.model.ts\n    \n    \n        \n            \n                \n                    \n                    ButtonClassType\n                \n            \n            \n                \n                    Represents the possible class types for a button.\n\n                \n            \n            \n                \n                        \"btn\" | \"btn-primary\" | \"btn-secondary\" | \"btn-success\" | \"btn-danger\" | \"btn-warning\" | \"btn-info\" | \"btn-light\" | \"btn-dark\" | \"btn-link\" | \"btn-outline-primary\" | \"btn-outline-secondary\" | \"btn-outline-success\" | \"btn-outline-danger\" | \"btn-outline-warning\" | \"btn-outline-info\" | \"btn-outline-light\" | \"btn-outline-dark\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ButtonType\n                \n            \n            \n                \n                    Represents the type of a button.\n\n                \n            \n            \n                \n                        \"button\" | \"submit\" | \"reset\"\n\n                \n            \n        \n    \n    src/app/shared/models/card.model.ts\n    \n    \n        \n            \n                \n                    \n                    CardType\n                \n            \n            \n                \n                    Represents the type of a card, which can be one of the following:\n\n                \n            \n            \n                \n                        \"text-bg-primary\" | \"text-bg-secondary\" | \"text-bg-success\" | \"text-bg-danger\" | \"text-bg-warning\" | \"text-bg-info\" | \"text-bg-light\" | \"text-bg-dark\" | \"border-primary\" | \"border-secondary\" | \"border-success\" | \"border-danger\" | \"border-warning\" | \"border-info\" | \"border-light\" | \"border-dark\"\n\n                \n            \n        \n    \n    src/app/shared/models/form.model.ts\n    \n    \n        \n            \n                \n                    \n                    InputFormType\n                \n            \n            \n                \n                    Represents the type of input form.\n\n                \n            \n            \n                \n                        \"text\" | \"email\" | \"password\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TypeFormModel\n                \n            \n            \n                \n                        \"login\" | \"register\" | \"search\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            cities   (src/.../dashboard.actions.ts)\n                        \n                        \n                            cities$   (src/.../dashboard.selectors.ts)\n                        \n                        \n                            citiesSuccess   (src/.../dashboard.actions.ts)\n                        \n                        \n                            COMPONENTS   (src/.../cities.component.ts)\n                        \n                        \n                            COMPONENTS   (src/.../form.component.ts)\n                        \n                        \n                            COMPONENTS   (src/.../navbar.component.ts)\n                        \n                        \n                            COMPONENTS   (src/.../city.component.ts)\n                        \n                        \n                            COMPONENTS   (src/.../dashboard.component.ts)\n                        \n                        \n                            dashboardFeatureKey   (src/.../dashboard.reducer.ts)\n                        \n                        \n                            dashboardReducer   (src/.../dashboard.reducer.ts)\n                        \n                        \n                            ENDPOINTS   (src/.../endpoints.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            getCity   (src/.../dashboard.actions.ts)\n                        \n                        \n                            getCity$   (src/.../dashboard.selectors.ts)\n                        \n                        \n                            getCitySuccess   (src/.../dashboard.actions.ts)\n                        \n                        \n                            getDashboardFeature   (src/.../dashboard.selectors.ts)\n                        \n                        \n                            getUserFeature   (src/.../user.selectors.ts)\n                        \n                        \n                            IMAGES   (src/.../images.ts)\n                        \n                        \n                            initialState   (src/.../dashboard.reducer.ts)\n                        \n                        \n                            initialState   (src/.../user.reducer.ts)\n                        \n                        \n                            login   (src/.../user.actions.ts)\n                        \n                        \n                            loginSuccess   (src/.../user.actions.ts)\n                        \n                        \n                            logOut   (src/.../user.actions.ts)\n                        \n                        \n                            logOutSuccess   (src/.../user.actions.ts)\n                        \n                        \n                            MODULE   (src/.../form.component.ts)\n                        \n                        \n                            MODULES   (src/.../cities.component.ts)\n                        \n                        \n                            MODULES   (src/.../city.component.ts)\n                        \n                        \n                            register   (src/.../user.actions.ts)\n                        \n                        \n                            registerSuccess   (src/.../user.actions.ts)\n                        \n                        \n                            resetCity   (src/.../dashboard.actions.ts)\n                        \n                        \n                            ROUTE   (src/.../route.ts)\n                        \n                        \n                            setUserData   (src/.../user.actions.ts)\n                        \n                        \n                            setUserDataSuccess   (src/.../user.actions.ts)\n                        \n                        \n                            TIMER   (src/.../alert-popup.model.ts)\n                        \n                        \n                            token$   (src/.../user.selectors.ts)\n                        \n                        \n                            userFeatureKey   (src/.../user.reducer.ts)\n                        \n                        \n                            userReducer   (src/.../user.reducer.ts)\n                        \n                        \n                            userState$   (src/.../user.selectors.ts)\n                        \n                        \n                            VERSIONS   (src/.../endpoints.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes, withViewTransitions()),\n    provideHttpClient(),\n\n    provideStore(),\n\n    provideStore({ user: userReducer, search: dashboardReducer }),\n    provideStoreDevtools(),\n    provideEffects([UserEffects, DashboardEffects]),\n  ],\n  \n}\n                    \n                \n\n            \n                \n                    Configuration object for the application.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/dashboard/dashboard.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cities\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[Dashboard] Get Cities', props())\n                    \n                \n\n            \n                \n                    Action to get cities for the dashboard.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        citiesSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[Dashboard] Get Cities Success', props())\n                    \n                \n\n            \n                \n                    Action creator for the 'citiesSuccess' action.\nThis action is dispatched when the cities data is successfully retrieved.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCity\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[City] Get City Info', props())\n                    \n                \n\n            \n                \n                    Action to get city information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCitySuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[City] Get City Info Success', props())\n                    \n                \n\n            \n                \n                    Action to indicate a successful retrieval of city information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetCity\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[City] Reset City')\n                    \n                \n\n            \n                \n                    Action to reset the city.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/dashboard/dashboard.selectors.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cities$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(getDashboardFeature, ({ cities }) => cities)\n                    \n                \n\n            \n                \n                    Selects the cities from the dashboard feature state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCity$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(getDashboardFeature, ({ city }) => city)\n                    \n                \n\n            \n                \n                    Retrieves the city from the dashboard feature state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDashboardFeature\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createFeatureSelector(dashboardFeatureKey)\n                    \n                \n\n            \n                \n                    Retrieves the dashboard feature state from the store.\n\n                \n            \n\n        \n    \n\n    src/app/core/components/cities/cities.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [FormComponent, CardComponent, ButtonComponent]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MODULES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CommonModule, RouterLink]\n                    \n                \n\n\n        \n    \n\n    src/app/shared/components/form/form.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CardComponent, ButtonComponent]\n                    \n                \n\n            \n                \n                    Array of components used in the component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CommonModule, ReactiveFormsModule, RouterLink]\n                    \n                \n\n            \n                \n                    Array of modules used in the form component.\n\n                \n            \n\n        \n    \n\n    src/app/shared/components/navbar/navbar.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  ButtonComponent,\n]\n                    \n                \n\n\n        \n    \n\n    src/app/modules/components/city/city.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CardComponent, ButtonComponent, BarChartComponent, StarRatingComponent]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MODULES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CommonModule, RouterLink]\n                    \n                \n\n\n        \n    \n\n    src/app/modules/components/dashboard/dashboard.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  NavBarComponent,\n  CitiesComponent,\n]\n                    \n                \n\n            \n                \n                    Array of components used in the dashboard.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/dashboard/dashboard.reducer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dashboardFeatureKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'search'\n                    \n                \n\n            \n                \n                    The key used to identify the dashboard feature in the store.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dashboardReducer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createReducer(\n  initialState,\n  /**\n   * Updates the state with the list of cities.\n   * @param state - The current state.\n   * @param cities - The list of cities.\n   * @returns The updated state with the list of cities.\n   */\n  on(citiesSuccess, (state, { cities }) => ({ ...state, cities })),\n  /**\n   * Updates the state with a single city.\n   * @param state - The current state.\n   * @param city - The city object.\n   * @returns The updated state with the city object.\n   */\n  on(getCitySuccess, (state, { city }) => ({ ...state, city })),\n  /**\n   * Resets the city object in the state.\n   * @param state - The current state.\n   * @returns The updated state with an empty city object.\n   */\n  on(resetCity, (state) => ({ ...state, city: {} as CityInfoResponse }))\n)\n                    \n                \n\n            \n                \n                    Reducer function for the dashboard state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initialState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DashboardState\n\n                    \n                \n                \n                    \n                        Default value : {\n  cities: {} as Cities,\n  city: {} as CityInfoResponse,\n}\n                    \n                \n\n            \n                \n                    The initial state for the dashboard reducer.\n\n                \n            \n\n        \n    \n\n    src/app/constants/endpoints.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  CITIES: `${VERSIONS.V1}/cities`,\n}\n                    \n                \n\n            \n                \n                    Defines the endpoints used in the application.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        VERSIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  V1: 'v1',\n}\n                    \n                \n\n            \n                \n                    Defines the version used in the endpoint path.\n\n                \n            \n\n        \n    \n\n    src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    /**\n     * Indicates whether the application is in production mode.\n     */\n    production: true,\n\n    /**\n     * The base URL for API requests in the production environment.\n     */\n    baseUrl: 'http://localhost:1234',\n}\n                    \n                \n\n            \n                \n                    Represents the production environment configuration.\n\n                \n            \n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    /**\n     * Specifies whether the application is in production mode or not.\n     */\n    production: false,\n\n    /**\n     * Specifies the base URL for API requests.\n     */\n    baseUrl: 'http://localhost:1234',\n}\n                    \n                \n\n            \n                \n                    Represents the environment configuration for the application.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/user/user.selectors.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getUserFeature\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createFeatureSelector(userFeatureKey)\n                    \n                \n\n            \n                \n                    Retrieves the user feature state from the store.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(getUserFeature, ({ token }) => token)\n                    \n                \n\n            \n                \n                    Selects the token from the user feature state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userState$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(getUserFeature, state => state)\n                    \n                \n\n            \n                \n                    Selects the user state from the user feature state.\n\n                \n            \n\n        \n    \n\n    src/app/constants/images.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IMAGES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * Path to the YanchWareGo mini logo image.\n   */\n  YANCHWAREGO_MINI_LOGO: './assets/images/YanchWareGo_mini_logo.svg',\n\n  /**\n   * Path to the YanchWareGo logo image.\n   */\n  YANCHWAREGO_LOGO: './assets/images/YanchWareGo_logo.svg',\n\n  /**\n   * Path to the YanchWare logo image.\n   */\n  YANCHWARE_LOGO: './assets/images/YanchWare_logo.svg',\n}\n                    \n                \n\n            \n                \n                    Contains the paths to various image assets used in the application.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/user/user.reducer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initialState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserState\n\n                    \n                \n                \n                    \n                        Default value : {\n  name: '',\n  token: '',\n}\n                    \n                \n\n            \n                \n                    Initial state for the User reducer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFeatureKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n            \n                \n                    The key used to access the user feature state in the Redux store.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userReducer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createReducer(\n  initialState,\n  \n  /**\n   * Updates the state with the user's information after a successful login.\n   * @param state - The current user state.\n   * @param response - The response object containing the user's token and name.\n   * @returns The updated user state.\n   */\n  on(loginSuccess, (state, { response } ) => ({ ...state, token: response.token, name: response.name })),\n\n  /**\n   * Updates the state with the user's information after a successful registration.\n   * @param state - The current user state.\n   * @param response - The response object containing the user's token and name.\n   * @returns The updated user state.\n   */\n  on(registerSuccess, (state, { response } ) => ({ ...state, token: response.token, name: response.name })),\n\n  /**\n   * Resets the user state to the initial state after a successful logout.\n   * @returns The initial user state.\n   */\n  on(logOutSuccess, () => ( initialState ))\n)\n                    \n                \n\n            \n                \n                    Reducer function for managing user state.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/user/user.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Login', props())\n                    \n                \n\n            \n                \n                    Action to initiate the login process for a user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Login Success', props())\n                    \n                \n\n            \n                \n                    Action creator for login success.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logOut\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Logout')\n                    \n                \n\n            \n                \n                    Action creator for logging out the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logOutSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Logout Success')\n                    \n                \n\n            \n                \n                    Action creator for the 'logOutSuccess' action.\nThis action is dispatched when a user successfully logs out.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Register', props())\n                    \n                \n\n            \n                \n                    Registers a user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Registered Success', props())\n                    \n                \n\n            \n                \n                    Action creator for registering success.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUserData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Set User Data')\n                    \n                \n\n            \n                \n                    Action creator for setting user data.\nThis action is dispatched when user data needs to be set in the store.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUserDataSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Set User Data Successfully')\n                    \n                \n\n            \n                \n                    Action creator for setting user data successfully.\nThis action is dispatched when user data is successfully set.\n\n                \n            \n\n        \n    \n\n    src/app/constants/route.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROUTE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * The login route.\n   */\n  LOGIN: 'login',\n  \n  /**\n   * The register route.\n   */\n  REGISTER: 'register',\n  \n  /**\n   * The dashboard route.\n   */\n  DASHBOARD: 'dashboard',\n  \n  /**\n   * The city route.\n   */\n  CITY: 'city',\n}\n                    \n                \n\n            \n                \n                    Defines the routes used in the application.\n\n                \n            \n\n        \n    \n\n    src/app/shared/models/alert-popup.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TIMER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7000\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
